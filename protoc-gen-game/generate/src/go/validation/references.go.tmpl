// Generated by protoc-gen-game/generation. DO NOT EDIT.
package validation

import (
	"fmt"

	"github.com/jhump/protoreflect/desc"
	dpb "github.com/golang/protobuf/protoc-gen-go/descriptor"

	pb "github.com/angelbeltran/game-engine/protoc-gen-game/game_engine_pb"
)

// Generic tools for verifying Reference values.

func ValidateReference(ref *pb.Reference, md *desc.MessageDescriptor, t Type) error {
	return VerifyEndOfPath(ref.Path, md, func(fd *desc.FieldDescriptor) error {
		u, err := FieldDescriptorTypeToSupportedType(fd.GetType())
		if err != nil {
			return fmt.Errorf("invalid field %s: %w", fd.GetFullyQualifiedName(), err)
		}

		if t != u {
			return fmt.Errorf("unexpected type at field %s: expected %s but found %s", fd.GetFullyQualifiedName(), t, u)
		}

		return nil
	})
}

func VerifyEndOfPath(path []string, md *desc.MessageDescriptor, validators ...func(*desc.FieldDescriptor) error) error {
	if len(path) == 0 {
		return fmt.Errorf("no path specified")
	}

	var fd *desc.FieldDescriptor

	for _, part := range path {
		if md == nil {
			return fmt.Errorf("field %s is not a message type", part)
		}

		if fd = md.FindFieldByName(part); fd == nil {
			return fmt.Errorf("no field named %s", part)
		}

		md = fd.GetMessageType()
	}

	if md != nil {
		return fmt.Errorf("field named %s is a message type", path[len(path)-1])
	}

	for _, f := range validators {
		if err := f(fd); err != nil {
			return err
		}
	}

	return nil
}

func FieldDescriptorTypeToSupportedType(t dpb.FieldDescriptorProto_Type) (Type, error) {
	switch t {
{{- range $pbType, $type := .ProtobufTypesToTypes }}
	case {{ $pbType }}:
		return Type{{ capitalize $type }}, nil
{{- end }}
	}
	return TypeNone, fmt.Errorf("unsupported field type: %s", t)
}

