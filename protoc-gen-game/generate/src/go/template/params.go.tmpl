// Generated by protoc-gen-game/generation. DO NOT EDIT.
package template

import (
	"github.com/jhump/protoreflect/desc"

	pb "github.com/angelbeltran/game-engine/protoc-gen-game/game_engine_pb"
)

{{- $types := .Types }}


//
// ----- Simple State Or Input References -----
//

type ReferenceParams struct {
	Reference *pb.Reference
	Variable string
}

func NewReferenceParams(variable string, reference *pb.Reference) ReferenceParams {
	return ReferenceParams{
		Variable: variable,
		Reference: reference,
	}
}

//
// ----- Values -----
//

type ValueParams struct {
	Value *pb.Value
	InputVariable string
	StateVariable string
}

func NewValueParams(value *pb.Value, input, state string) ValueParams {
	return ValueParams{
		Value: value,
		InputVariable: input,
		StateVariable: state,
	}
}
{{ range $_, $type := $types }}
{{- $type = capitalize $type }}
{{- $valueType := printf "%sValue" $type }}
type {{ $valueType }}Params struct {
	Value *pb.{{ $valueType }}
	InputVariable string
	StateVariable string
}

func New{{ $valueType }}Params(value *pb.{{ $valueType }}, input, state string) {{ $valueType }}Params {
	return {{ $valueType }}Params{
		Value: value,
		InputVariable: input,
		StateVariable: state,
	}
}
{{ end }}

//
// ----- Unary Functions -----
//

{{- range $_, $domain := $types }}
{{- $domain = capitalize $domain }}
{{- range $_, $codomain := $types }}
{{- $codomain = capitalize $codomain }}
{{- $funcType := printf "%sTo%sFunction" $domain $codomain }}

type {{ $funcType }}Params struct {
	Function *pb.{{ $funcType }}
	InputVariable string
	StateVariable string
}

func New{{ $funcType }}Params(function *pb.{{ $funcType }}, input, state string) {{ $funcType }}Params {
	return {{ $funcType }}Params{
		Function: function,
		InputVariable: input,
		StateVariable: state,
	}
}
{{- end }}
{{- end }}

//
// ----- Binary Functions -----
//

{{- range $_, $domain1 := $types }}
{{- $domain1 = capitalize $domain1 }}
{{- range $_, $domain2 := $types }}
{{- $domain2 = capitalize $domain2 }}
{{- range $_, $codomain := $types }}
{{- $codomain = capitalize $codomain }}
{{- $funcType := printf "%sAnd%sTo%sFunction" $domain1 $domain2 $codomain }}

type {{ $funcType }}Params struct {
	Function *pb.{{ $funcType }}
	InputVariable string
	StateVariable string
}

func New{{ $funcType }}Params(function *pb.{{ $funcType }}, input, state string) {{ $funcType }}Params {
	return {{ $funcType }}Params{
		Function: function,
		InputVariable: input,
		StateVariable: state,
	}
}
{{- end }}
{{- end }}
{{- end }}

//
// ----- N-ary Functions -----
//

{{- range $_, $domain := $types }}
{{- $domain = capitalize $domain }}
{{- range $_, $codomain := $types }}
{{- $codomain = capitalize $codomain }}
{{- $funcType := printf "%ssTo%sFunction" $domain $codomain }}

type {{ $funcType }}Params struct {
	Function *pb.{{ $funcType }}
	InputVariable string
	StateVariable string
}

func New{{ $funcType }}Params(function *pb.{{ $funcType }}, input, state string) {{ $funcType }}Params {
	return {{ $funcType }}Params{
		Function: function,
		InputVariable: input,
		StateVariable: state,
	}
}
{{- end }}
{{- end }}

//
// ----- If-Else Control Structures -----
//

{{- range $type := $types }}
{{- $ifType := printf "%sValueIf" (capitalize $type) }}

type {{ $ifType }}Params struct {
	If *pb.{{ $ifType }}
	InputVariable string
	StateVariable string
}

func New{{ $ifType }}Params(v *pb.{{ $ifType }}, input, state string) {{ $ifType }}Params {
	return {{ $ifType }}Params{
		If: v,
		InputVariable: input,
		StateVariable: state,
	}
}
{{- end }}

//
// ----- Others parameter constructors -----
//

type EffectParams struct {
	Effect *pb.Effect
	InputVariable string
	StateVariable string
}

func NewEffectParams(effect *pb.Effect, input, state string) EffectParams {
	return EffectParams {
		Effect: effect,
		InputVariable: input,
		StateVariable: state,
	}
}

type ResponseParams struct {
	Reference *pb.Reference
	InputVariable string
	StateVariable string
}

func NewResponseParams(reference *pb.Reference, input, state string) ResponseParams {
	return ResponseParams {
		Reference: reference,
		InputVariable: input,
		StateVariable: state,
	}
}

type MessageInitializerParams struct {
	Identifier string
	Package string
	MessageDescriptor *desc.MessageDescriptor
}

func NewMessageInitializerParams(ident, pkg string, msg *desc.MessageDescriptor) MessageInitializerParams {
	return MessageInitializerParams {
		Identifier: ident,
		Package: pkg,
		MessageDescriptor: msg,
	}
}

type MessageCopyParams struct {
	LeftHandIdentifier string
	RightHandIdentifier string
	Package string
	MessageDescriptor *desc.MessageDescriptor
}

func NewMessageCopyParams(left, right, pkg string, msg *desc.MessageDescriptor) MessageCopyParams {
	return MessageCopyParams {
		LeftHandIdentifier: left,
		RightHandIdentifier: right,
		Package: pkg,
		MessageDescriptor: msg,
	}
}

