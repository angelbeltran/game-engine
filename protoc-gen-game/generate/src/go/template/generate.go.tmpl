// Generated by protoc-gen-game/generation. DO NOT EDIT.
package template

import (
	"bytes"
	"fmt"
	"go/format"
	"io"
	"io/ioutil"
	"strings"
	"text/template"

	"github.com/jhump/protoreflect/desc"
	"github.com/jhump/goprotoc/plugins"

	pb "github.com/angelbeltran/game-engine/protoc-gen-game/game_engine_pb"
)

{{- $types := .Types }}
{{- $typesToGoTypes := .TypesToGoTypes }}

//
// ----- Entrypoint -----
//

func GenerateService(w io.Writer, opts TemplateParams) error {

	// Parse template.

	tmpl, err := template.New("main").Funcs(template.FuncMap{
		"camelCase": (&plugins.GoNames{}).CamelCase,
		"goTypeOfField": names.GoTypeOfField,
		"goTypeForMessage": names.GoTypeForMessage,
		"goTypeForMessageWithoutTargetPackageName": func(md *desc.MessageDescriptor) string {
			s := names.GoTypeForMessage(md).String()
			parts := strings.Split(s, ".")

			if len(parts) == 0 {
				return s
			}
			if parts[0] == opts.Package {
				return parts[1]
			}

			return s
		},
		"goTypeForMessageWithCamelCasePackage": func(md *desc.MessageDescriptor) string {
			var name string

			for _, part := range strings.Split(names.GoTypeForMessage(md).String(), ".") {
				name += names.CamelCase(part)
			}

			return name
		},
		"failNoFunctionName": failNoFunctionName,
		"failUndefinedEffect": failUndefinedEffect,
		"split": strings.Split,
		"errBadTypeName": func(typeName string) (interface{}, error) {
			return nil, fmt.Errorf("type name has more that one '.': %s", typeName)
		},
		"NewEffectParams": NewEffectParams,
		"NewMessageInitializerParams": NewMessageInitializerParams,
		"NewReferenceParams": NewReferenceParams,
		"NewValueParams": NewValueParams,
		{{- range $_, $type := $types }}
		{{- $ident := printf "New%sValueParams" (capitalize $type) }}
		"{{ $ident }}": {{ $ident }},
		{{- end }}
		{{- range $_, $domain := $types }}
		{{- range $_, $codomain := $types }}
		{{- $ident := printf "New%sTo%sFunctionParams" (capitalize $domain) (capitalize $codomain) }}
		"{{ $ident }}": {{ $ident }},
		{{- end }}
		{{- end }}
		{{- range $_, $domain1 := $types }}
		{{- range $_, $domain2 := $types }}
		{{- range $_, $codomain := $types }}
		{{- $ident := printf "New%sAnd%sTo%sFunctionParams" (capitalize $domain1) (capitalize $domain2) (capitalize $codomain) }}
		"{{ $ident }}": {{ $ident }},
		{{- end }}
		{{- end }}
		{{- end }}
		{{- range $_, $domain := $types }}
		{{- range $_, $codomain := $types }}
		{{- $ident := printf "New%ssTo%sFunctionParams" (capitalize $domain) (capitalize $codomain) }}
		"{{ $ident }}": {{ $ident }},
		{{- end }}
		{{- end }}
		{{- range $type := $types }}
		{{- $ifType := printf "%sValueIf" (capitalize $type) }}
		{{- $ident := printf "New%sParams" $ifType }}
		"{{ $ident }}": {{ $ident }},
		{{- end }}
	}).Parse(serverTemplate)
	if err != nil {
		return fmt.Errorf("failed to parse service template: %w", err)
	}

	// Apply runtime parameters.

	out := bytes.NewBuffer([]byte{})

	if err := tmpl.Execute(out, opts); err != nil {
		return fmt.Errorf("failed to execute service template: %w", err)
	}

	// Format and write to file.

	b, err := ioutil.ReadAll(out)
	if err != nil {
		return fmt.Errorf("failed to read unformated templates: %w", err)
	}

	b, err = format.Source(b)
	if err != nil {
		return fmt.Errorf("failed to format generated templates: %w", err)
	}

	if _, err := w.Write(b); err != nil {
		return fmt.Errorf("failed to write out formatted templates: %w", err)
	}

	return nil
}

// TemplateParams hold all the arguments needed for the main template.
type TemplateParams struct {
	Package             string
	Imports             []string
	Service             *desc.ServiceDescriptor
	Methods             []MethodInfo
	State               *desc.MessageDescriptor
	Response            *desc.MessageDescriptor
	StateVariable       string
	InputVariable       string
	EnumToFieldMappings map[*desc.MessageDescriptor]*desc.EnumDescriptor
	ResponseStateField  string
	ResponseErrorField  string
}

// MethodInfo is a method and action pair.
type MethodInfo struct {
	Method *desc.MethodDescriptor
	Action *pb.Action
}

var names plugins.GoNames

