syntax = "proto3";
package puerto_rico_game;

import "google/protobuf/descriptor.proto";
import "github.com/angelbeltran/game-engine/protoc-gen-game/game_engine.proto";
import "github.com/angelbeltran/game-engine/examples/puerto-rico/role.proto";
import "github.com/angelbeltran/game-engine/examples/puerto-rico/building.proto";
import "github.com/angelbeltran/game-engine/examples/puerto-rico/good.proto";
import "github.com/angelbeltran/game-engine/examples/puerto-rico/player.proto";
import "github.com/angelbeltran/game-engine/examples/puerto-rico/plantation.proto";
import "github.com/angelbeltran/game-engine/examples/puerto-rico/cargo_ship.proto";
import "github.com/angelbeltran/game-engine/examples/puerto-rico/state.proto";

option go_package = "github.com/angelbeltran/game-engine/examples/puerto-rico/puerto_rico_pb";

service Actions {
  option (game_engine.is_action_service) = true;

  // Game start

  rpc SetPlayers(Count) returns (Response) {
    option (game_engine.action).rule = {
      bool_bool_func: {
        name: AND
        bool_func_1: {
          name: NOT
          state: { path: [ 'started' ] }
        }
        int_int_func_2: {
          name: LTE
          constant_1: 3
          input_2: { path: [ 'count' ] }
        }
      }
    };

    option (game_engine.action).effect = {
      update: {
        state: { path: [ 'players', 'player_1', 'present' ] }
        value: {
          bool: {
            int_int_func: {
              name: LTE
              constant_1: 3
              input_2: { path: [ 'count' ] }
            }
          }
        }
      }
    };

    option (game_engine.action).effect = {
      update: {
        state: { path: [ 'players', 'player_2', 'present' ] }
        value: {
          bool: {
            int_int_func: {
              name: LTE
              constant_1: 3
              input_2: { path: [ 'count' ] }
            }
          }
        }
      }
    };

    option (game_engine.action).effect = {
      update: {
        state: { path: [ 'players', 'player_3', 'present' ] }
        value: {
          bool: {
            int_int_func: {
              name: LTE
              constant_1: 3
              input_2: { path: [ 'count' ] }
            }
          }
        }
      }
    };

    option (game_engine.action).effect = {
      update: {
        state: { path: [ 'players', 'player_4', 'present' ] }
        value: {
          bool: {
            int_int_func: {
              name: LTE
              constant_1: 4
              input_2: { path: [ 'count' ] }
            }
          }
        }
      }
    };

    option (game_engine.action).effect = {
      update: {
        state: { path: [ 'players', 'player_5', 'present' ] }
        value: {
          bool: {
            int_int_func: {
              name: LTE
              constant_1: 5
              input_2: { path: [ 'count' ] }
            }
          }
        }
      }
    };

    option (game_engine.action).response = {
      path: [ 'started' ]
    };
    option (game_engine.action).response = {
      path: [ 'players', 'player_1', 'present' ]
    };
    option (game_engine.action).response = {
      path: [ 'players', 'player_2', 'present' ]
    };
    option (game_engine.action).response = {
      path: [ 'players', 'player_3', 'present' ]
    };
    option (game_engine.action).response = {
      path: [ 'players', 'player_4', 'present' ]
    };
    option (game_engine.action).response = {
      path: [ 'players', 'player_5', 'present' ]
    };

    option (game_engine.action).error = {
      code: "826de622-ad54-4b65-3395-bb4d3828e67b"
      msg: "dummy error"
    };
  };

  rpc Start(EmptyMsg) returns (Response) {
    option (game_engine.action).rule = {
      bool_bool_func: {
        name: AND
        bool_func_1: {
          name: NOT
          state: { path: [ 'started' ] }
        }
        bool_bool_func_2: {
          name: AND
          state_1: { path: [ 'players', 'player_1', 'present' ] }
          bool_bool_func_2: {
            name: AND
            state_1: { path: [ 'players', 'player_2', 'present' ] }
            bool_bool_func_2: {
              name: AND
              state_1: { path: [ 'players', 'player_3', 'present' ] }
              bool_bool_func_2: {
                name: OR
                state_1: { path: [ 'players', 'player_4', 'present' ] }
                bool_func_2: {
                  name: NOT
                  state: { path: [ 'players', 'player_5', 'present' ] }
                }
              }
            }
          }
        }
      }
    };

    option (game_engine.action).effect = {
      update: {
        state: { path: [ 'started' ] }
        value: { bool: { constant: true } }
      }
    };

    option (game_engine.action).response = {
      path: [ 'started' ]
    };

    option (game_engine.action).error = {
      code: "57e0c77b-3e2b-431c-c5ed-ee81a89d5ee6"
      msg: "game has already started"
    };
  };

  // General gameplay

  rpc Accept(RoleChoice) returns (Response) {
    option (game_engine.action).rule = {
      bools_func: {
        name: AND
        arguments: { state: { path: [ 'started' ] } }
        arguments: {
          bools_func: {
            name: OR

            arguments: {
              bool_bool_func: {
                name: AND
                int_int_func_1: {
                  name: EQ
                  constant_1: 1
                  input_2: { path: [ 'player' ] }
                }
                int_int_func_2: {
                  name: EQ
                  constant_1: 0
                  state_2: { path: [ 'players', 'player_1', 'role' ] }
                }
              }
            }

            arguments: {
              bool_bool_func: {
                name: AND
                int_int_func_1: {
                  name: EQ
                  constant_1: 2
                  input_2: { path: [ 'player' ] }
                }
                int_int_func_2: {
                  name: EQ
                  constant_1: 0
                  state_2: { path: [ 'players', 'player_2', 'role' ] }
                }
              }
            }

            arguments: {
              bool_bool_func: {
                name: AND
                int_int_func_1: {
                  name: EQ
                  constant_1: 3
                  input_2: { path: [ 'player' ] }
                }
                int_int_func_2: {
                  name: EQ
                  constant_1: 0
                  state_2: { path: [ 'players', 'player_3', 'role' ] }
                }
              }
            }

            arguments: {
              bool_bool_func: {
                name: AND
                int_int_func_1: {
                  name: EQ
                  constant_1: 4
                  input_2: { path: [ 'player' ] }
                }
                int_int_func_2: {
                  name: EQ
                  constant_1: 0
                  state_2: { path: [ 'players', 'player_4', 'role' ] }
                }
              }
            }

            arguments: {
              bool_bool_func: {
                name: AND
                int_int_func_1: {
                  name: EQ
                  constant_1: 5
                  input_2: { path: [ 'player' ] }
                }
                int_int_func_2: {
                  name: EQ
                  constant_1: 0
                  state_2: { path: [ 'players', 'player_5', 'role' ] }
                }
              }
            }
          }
        }

        arguments: {
          bools_func: {
            name: OR

            arguments: {
              bools_func: {
                name: AND
                arguments: {
                  int_int_func: {
                    name: EQ
                    constant_1: 1
                    input_2: { path: [ 'role' ] }
                  }
                }
                arguments: {
                  bool_func: {
                    name: NOT
                    state: { path: [ 'roles', 'prospector1', 'available' ] }
                  }
                }
              }
            }

            arguments: {
              bools_func: {
                name: AND
                arguments: {
                  int_int_func: {
                    name: EQ
                    constant_1: 2
                    input_2: { path: [ 'role' ] }
                  }
                }
                arguments: {
                  bool_func: {
                    name: NOT
                    state: { path: [ 'roles', 'prospector2', 'available' ] }
                  }
                }
              }
            }

            arguments: {
              bools_func: {
                name: AND
                arguments: {
                  int_int_func: {
                    name: EQ
                    constant_1: 3
                    input_2: { path: [ 'role' ] }
                  }
                }
                arguments: {
                  bool_func: {
                    name: NOT
                    state: { path: [ 'roles', 'builder', 'available' ] }
                  }
                }
              }
            }

            arguments: {
              bools_func: {
                name: AND
                arguments: {
                  int_int_func: {
                    name: EQ
                    constant_1: 4
                    input_2: { path: [ 'role' ] }
                  }
                }
                arguments: {
                  bool_func: {
                    name: NOT
                    state: { path: [ 'roles', 'captain', 'available' ] }
                  }
                }
              }
            }

            arguments: {
              bools_func: {
                name: AND
                arguments: {
                  int_int_func: {
                    name: EQ
                    constant_1: 5
                    input_2: { path: [ 'role' ] }
                  }
                }
                arguments: {
                  bool_func: {
                    name: NOT
                    state: { path: [ 'roles', 'craftsman', 'available' ] }
                  }
                }
              }
            }

            arguments: {
              bools_func: {
                name: AND
                arguments: {
                  int_int_func: {
                    name: EQ
                    constant_1: 6
                    input_2: { path: [ 'role' ] }
                  }
                }
                arguments: {
                  bool_func: {
                    name: NOT
                    state: { path: [ 'roles', 'mayor', 'available' ] }
                  }
                }
              }
            }

            arguments: {
              bools_func: {
                name: AND
                arguments: {
                  int_int_func: {
                    name: EQ
                    constant_1: 7
                    input_2: { path: [ 'role' ] }
                  }
                }
                arguments: {
                  bool_func: {
                    name: NOT
                    state: { path: [ 'roles', 'settler', 'available' ] }
                  }
                }
              }
            }

            arguments: {
              bools_func: {
                name: AND
                arguments: {
                  int_int_func: {
                    name: EQ
                    constant_1: 8
                    input_2: { path: [ 'role' ] }
                  }
                }
                arguments: {
                  bool_func: {
                    name: NOT
                    state: { path: [ 'roles', 'trader', 'available' ] }
                  }
                }
              }
            }
          }
        }
      }
    };

    option (game_engine.action).effect = {
      update: {
        state: { path: [ 'roles', 'prospector1', 'available' ] }
        value: {
          bool: {
            bool_bool_func: {
              name: OR
              state_1: { path: [ 'roles', 'prospector1', 'available' ] }
              int_int_func_2: {
                name: EQ
                constant_1: 1
                input_2: { path: [ 'role' ] }
              }
            }
          }
        }
      }
    };

    option (game_engine.action).effect = {
      update: {
        state: { path: [ 'roles', 'prospector2', 'available' ] }
        value: {
          bool: {
            bool_bool_func: {
              name: OR
              state_1: { path: [ 'roles', 'prospector2', 'available' ] }
              int_int_func_2: {
                name: EQ
                constant_1: 2
                input_2: { path: [ 'role' ] }
              }
            }
          }
        }
      }
    };

    option (game_engine.action).effect = {
      update: {
        state: { path: [ 'roles', 'builder', 'available' ] }
        value: {
          bool: {
            bool_bool_func: {
              name: OR
              state_1: { path: [ 'roles', 'builder', 'available' ] }
              int_int_func_2: {
                name: EQ
                constant_1: 3
                input_2: { path: [ 'role' ] }
              }
            }
          }
        }
      }
    };

    option (game_engine.action).effect = {
      update: {
        state: { path: [ 'roles', 'captain', 'available' ] }
        value: {
          bool: {
            bool_bool_func: {
              name: OR
              state_1: { path: [ 'roles', 'captain', 'available' ] }
              int_int_func_2: {
                name: EQ
                constant_1: 4
                input_2: { path: [ 'role' ] }
              }
            }
          }
        }
      }
    };

    option (game_engine.action).effect = {
      update: {
        state: { path: [ 'roles', 'craftsman', 'available' ] }
        value: {
          bool: {
            bool_bool_func: {
              name: OR
              state_1: { path: [ 'roles', 'craftsman', 'available' ] }
              int_int_func_2: {
                name: EQ
                constant_1: 5
                input_2: { path: [ 'role' ] }
              }
            }
          }
        }
      }
    };

    option (game_engine.action).effect = {
      update: {
        state: { path: [ 'roles', 'mayor', 'available' ] }
        value: {
          bool: {
            bool_bool_func: {
              name: OR
              state_1: { path: [ 'roles', 'mayor', 'available' ] }
              int_int_func_2: {
                name: EQ
                constant_1: 6
                input_2: { path: [ 'role' ] }
              }
            }
          }
        }
      }
    };

    option (game_engine.action).effect = {
      update: {
        state: { path: [ 'roles', 'settler', 'available' ] }
        value: {
          bool: {
            bool_bool_func: {
              name: OR
              state_1: { path: [ 'roles', 'settler', 'available' ] }
              int_int_func_2: {
                name: EQ
                constant_1: 7
                input_2: { path: [ 'role' ] }
              }
            }
          }
        }
      }
    };

    option (game_engine.action).effect = {
      update: {
        state: { path: [ 'roles', 'trader', 'available' ] }
        value: {
          bool: {
            bool_bool_func: {
              name: OR
              state_1: { path: [ 'roles', 'trader', 'available' ] }
              int_int_func_2: {
                name: EQ
                constant_1: 8
                input_2: { path: [ 'role' ] }
              }
            }
          }
        }
      }
    };

    option (game_engine.action).error = {
      code: "446eda13-7e86-40c5-55c0-ac363015f92d"
      msg: "dummy error"
    };
  };

  // Action: Builder
  rpc Purchase(BuildingChoice) returns (Response);

  // Action: Captain
  rpc Load(GoodToShip) returns (Response);

  // Action: Craftsman
  rpc Craft(EmptyMsg) returns (Response);
  rpc CraftExtra(GoodChoice) returns (Response);

  // Action: Mayor
  rpc WelcomeColonist(EmptyMsg) returns (Response);
  rpc WelcomeColonistFromSupply(EmptyMsg) returns (Response);
  rpc ApplyColonistToBuilding(BuildingChoice) returns (Response);
  rpc ApplyColonistToPlantation(PlantationChoice) returns (Response);
  rpc ApplyColonistToQuarry(EmptyMsg) returns (Response);
  rpc RefillColonistShip(EmptyMsg) returns (Response);

  // Action: Settler
  rpc Settle(PlantationChoice) returns (Response);
  rpc ConstructQuarry(EmptyMsg) returns (Response);

  // Action: Trademan
  rpc Trade(GoodChoice) returns (Response);

  rpc EndAction(PlayerChoice) returns (Response);
}

message Response {
  option (game_engine.is_action_service_response) = true;

  State state = 1;
  game_engine.Error error = 2;
}

// Action messages

message EmptyMsg {}

message Count {
  uint32 count = 1;
}

message RoleChoice {
  PlayerID player = 1;
  RoleID role = 2;
}

message BuildingChoice {
  Building building = 1;
}

message GoodToShip {
  GoodID good = 1;
  CargoShipID ship = 2;
}

message GoodChoice {
  GoodID good = 1;
}

message PlantationChoice {
  PlantationID plantation = 1;
}

message PlayerChoice {
  PlayerID player = 1;
}
