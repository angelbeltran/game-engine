// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.3
// source: github.com/angelbeltran/game-engine/examples/puerto-rico/state.proto

package puerto_rico_pb

import (
	_ "github.com/angelbeltran/game-engine/protoc-gen-game/game_engine_pb"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/protoc-gen-go/descriptor"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Started                bool               `protobuf:"varint,1,opt,name=started,proto3" json:"started,omitempty"`
	Turn                   PlayerID           `protobuf:"varint,2,opt,name=turn,proto3,enum=puerto_rico_game.PlayerID" json:"turn,omitempty"`
	Governor               PlayerID           `protobuf:"varint,3,opt,name=governor,proto3,enum=puerto_rico_game.PlayerID" json:"governor,omitempty"`
	Players                *State_Players     `protobuf:"bytes,4,opt,name=players,proto3" json:"players,omitempty"`
	Roles                  *State_Roles       `protobuf:"bytes,5,opt,name=roles,proto3" json:"roles,omitempty"`
	Quarries               uint32             `protobuf:"varint,6,opt,name=quarries,proto3" json:"quarries,omitempty"`
	Plantations            *State_Plantations `protobuf:"bytes,7,opt,name=plantations,proto3" json:"plantations,omitempty"`
	Goods                  *State_Goods       `protobuf:"bytes,8,opt,name=goods,proto3" json:"goods,omitempty"`
	Buildings              *State_Buildings   `protobuf:"bytes,9,opt,name=buildings,proto3" json:"buildings,omitempty"`
	CargoShips             *State_CargoShips  `protobuf:"bytes,10,opt,name=cargo_ships,json=cargoShips,proto3" json:"cargo_ships,omitempty"`
	ColonistShip           uint32             `protobuf:"varint,11,opt,name=colonist_ship,json=colonistShip,proto3" json:"colonist_ship,omitempty"`
	ColonistsAvailable     uint32             `protobuf:"varint,12,opt,name=colonists_available,json=colonistsAvailable,proto3" json:"colonists_available,omitempty"`
	VictoryPointsRemaining uint32             `protobuf:"varint,13,opt,name=victory_points_remaining,json=victoryPointsRemaining,proto3" json:"victory_points_remaining,omitempty"`
}

func (x *State) Reset() {
	*x = State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State) ProtoMessage() {}

func (x *State) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State.ProtoReflect.Descriptor instead.
func (*State) Descriptor() ([]byte, []int) {
	return file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_rawDescGZIP(), []int{0}
}

func (x *State) GetStarted() bool {
	if x != nil {
		return x.Started
	}
	return false
}

func (x *State) GetTurn() PlayerID {
	if x != nil {
		return x.Turn
	}
	return PlayerID_NO_PLAYER
}

func (x *State) GetGovernor() PlayerID {
	if x != nil {
		return x.Governor
	}
	return PlayerID_NO_PLAYER
}

func (x *State) GetPlayers() *State_Players {
	if x != nil {
		return x.Players
	}
	return nil
}

func (x *State) GetRoles() *State_Roles {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *State) GetQuarries() uint32 {
	if x != nil {
		return x.Quarries
	}
	return 0
}

func (x *State) GetPlantations() *State_Plantations {
	if x != nil {
		return x.Plantations
	}
	return nil
}

func (x *State) GetGoods() *State_Goods {
	if x != nil {
		return x.Goods
	}
	return nil
}

func (x *State) GetBuildings() *State_Buildings {
	if x != nil {
		return x.Buildings
	}
	return nil
}

func (x *State) GetCargoShips() *State_CargoShips {
	if x != nil {
		return x.CargoShips
	}
	return nil
}

func (x *State) GetColonistShip() uint32 {
	if x != nil {
		return x.ColonistShip
	}
	return 0
}

func (x *State) GetColonistsAvailable() uint32 {
	if x != nil {
		return x.ColonistsAvailable
	}
	return 0
}

func (x *State) GetVictoryPointsRemaining() uint32 {
	if x != nil {
		return x.VictoryPointsRemaining
	}
	return 0
}

type State_Players struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player_1 *Player `protobuf:"bytes,1,opt,name=player_1,json=player1,proto3" json:"player_1,omitempty"`
	Player_2 *Player `protobuf:"bytes,2,opt,name=player_2,json=player2,proto3" json:"player_2,omitempty"`
	Player_3 *Player `protobuf:"bytes,3,opt,name=player_3,json=player3,proto3" json:"player_3,omitempty"`
	Player_4 *Player `protobuf:"bytes,4,opt,name=player_4,json=player4,proto3" json:"player_4,omitempty"`
	Player_5 *Player `protobuf:"bytes,5,opt,name=player_5,json=player5,proto3" json:"player_5,omitempty"`
}

func (x *State_Players) Reset() {
	*x = State_Players{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *State_Players) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State_Players) ProtoMessage() {}

func (x *State_Players) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State_Players.ProtoReflect.Descriptor instead.
func (*State_Players) Descriptor() ([]byte, []int) {
	return file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_rawDescGZIP(), []int{0, 0}
}

func (x *State_Players) GetPlayer_1() *Player {
	if x != nil {
		return x.Player_1
	}
	return nil
}

func (x *State_Players) GetPlayer_2() *Player {
	if x != nil {
		return x.Player_2
	}
	return nil
}

func (x *State_Players) GetPlayer_3() *Player {
	if x != nil {
		return x.Player_3
	}
	return nil
}

func (x *State_Players) GetPlayer_4() *Player {
	if x != nil {
		return x.Player_4
	}
	return nil
}

func (x *State_Players) GetPlayer_5() *Player {
	if x != nil {
		return x.Player_5
	}
	return nil
}

type State_Roles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prospector1 *Role `protobuf:"bytes,1,opt,name=prospector1,proto3" json:"prospector1,omitempty"`
	Prospector2 *Role `protobuf:"bytes,2,opt,name=prospector2,proto3" json:"prospector2,omitempty"`
	Builder     *Role `protobuf:"bytes,3,opt,name=builder,proto3" json:"builder,omitempty"`
	Captain     *Role `protobuf:"bytes,4,opt,name=captain,proto3" json:"captain,omitempty"`
	Craftsman   *Role `protobuf:"bytes,5,opt,name=craftsman,proto3" json:"craftsman,omitempty"`
	Mayor       *Role `protobuf:"bytes,6,opt,name=mayor,proto3" json:"mayor,omitempty"`
	Settler     *Role `protobuf:"bytes,7,opt,name=settler,proto3" json:"settler,omitempty"`
	Trader      *Role `protobuf:"bytes,8,opt,name=trader,proto3" json:"trader,omitempty"`
}

func (x *State_Roles) Reset() {
	*x = State_Roles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *State_Roles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State_Roles) ProtoMessage() {}

func (x *State_Roles) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State_Roles.ProtoReflect.Descriptor instead.
func (*State_Roles) Descriptor() ([]byte, []int) {
	return file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_rawDescGZIP(), []int{0, 1}
}

func (x *State_Roles) GetProspector1() *Role {
	if x != nil {
		return x.Prospector1
	}
	return nil
}

func (x *State_Roles) GetProspector2() *Role {
	if x != nil {
		return x.Prospector2
	}
	return nil
}

func (x *State_Roles) GetBuilder() *Role {
	if x != nil {
		return x.Builder
	}
	return nil
}

func (x *State_Roles) GetCaptain() *Role {
	if x != nil {
		return x.Captain
	}
	return nil
}

func (x *State_Roles) GetCraftsman() *Role {
	if x != nil {
		return x.Craftsman
	}
	return nil
}

func (x *State_Roles) GetMayor() *Role {
	if x != nil {
		return x.Mayor
	}
	return nil
}

func (x *State_Roles) GetSettler() *Role {
	if x != nil {
		return x.Settler
	}
	return nil
}

func (x *State_Roles) GetTrader() *Role {
	if x != nil {
		return x.Trader
	}
	return nil
}

type State_Plantations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Displayed *State_Plantations_Displayed `protobuf:"bytes,1,opt,name=displayed,proto3" json:"displayed,omitempty"`
	Facedown  *State_Plantations_Counts    `protobuf:"bytes,2,opt,name=facedown,proto3" json:"facedown,omitempty"`
	Discarded *State_Plantations_Counts    `protobuf:"bytes,3,opt,name=discarded,proto3" json:"discarded,omitempty"`
}

func (x *State_Plantations) Reset() {
	*x = State_Plantations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *State_Plantations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State_Plantations) ProtoMessage() {}

func (x *State_Plantations) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State_Plantations.ProtoReflect.Descriptor instead.
func (*State_Plantations) Descriptor() ([]byte, []int) {
	return file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_rawDescGZIP(), []int{0, 2}
}

func (x *State_Plantations) GetDisplayed() *State_Plantations_Displayed {
	if x != nil {
		return x.Displayed
	}
	return nil
}

func (x *State_Plantations) GetFacedown() *State_Plantations_Counts {
	if x != nil {
		return x.Facedown
	}
	return nil
}

func (x *State_Plantations) GetDiscarded() *State_Plantations_Counts {
	if x != nil {
		return x.Discarded
	}
	return nil
}

type State_Goods struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Corn    uint32 `protobuf:"varint,1,opt,name=corn,proto3" json:"corn,omitempty"`
	Indigo  uint32 `protobuf:"varint,2,opt,name=indigo,proto3" json:"indigo,omitempty"`
	Sugar   uint32 `protobuf:"varint,3,opt,name=sugar,proto3" json:"sugar,omitempty"`
	Tobacco uint32 `protobuf:"varint,4,opt,name=tobacco,proto3" json:"tobacco,omitempty"`
	Coffee  uint32 `protobuf:"varint,5,opt,name=coffee,proto3" json:"coffee,omitempty"`
}

func (x *State_Goods) Reset() {
	*x = State_Goods{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *State_Goods) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State_Goods) ProtoMessage() {}

func (x *State_Goods) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State_Goods.ProtoReflect.Descriptor instead.
func (*State_Goods) Descriptor() ([]byte, []int) {
	return file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_rawDescGZIP(), []int{0, 3}
}

func (x *State_Goods) GetCorn() uint32 {
	if x != nil {
		return x.Corn
	}
	return 0
}

func (x *State_Goods) GetIndigo() uint32 {
	if x != nil {
		return x.Indigo
	}
	return 0
}

func (x *State_Goods) GetSugar() uint32 {
	if x != nil {
		return x.Sugar
	}
	return 0
}

func (x *State_Goods) GetTobacco() uint32 {
	if x != nil {
		return x.Tobacco
	}
	return 0
}

func (x *State_Goods) GetCoffee() uint32 {
	if x != nil {
		return x.Coffee
	}
	return 0
}

type State_Buildings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SmallIndigoPlant uint32 `protobuf:"varint,1,opt,name=small_indigo_plant,json=smallIndigoPlant,proto3" json:"small_indigo_plant,omitempty"`
	SmallSugarMill   uint32 `protobuf:"varint,2,opt,name=small_sugar_mill,json=smallSugarMill,proto3" json:"small_sugar_mill,omitempty"`
	SmallMarket      uint32 `protobuf:"varint,3,opt,name=small_market,json=smallMarket,proto3" json:"small_market,omitempty"`
	Hacienda         uint32 `protobuf:"varint,4,opt,name=hacienda,proto3" json:"hacienda,omitempty"`
	ConstructionHut  uint32 `protobuf:"varint,5,opt,name=construction_hut,json=constructionHut,proto3" json:"construction_hut,omitempty"`
	SmallWarehouse   uint32 `protobuf:"varint,6,opt,name=small_warehouse,json=smallWarehouse,proto3" json:"small_warehouse,omitempty"`
	IndigoPlant      uint32 `protobuf:"varint,7,opt,name=indigo_plant,json=indigoPlant,proto3" json:"indigo_plant,omitempty"`
	SugarMill        uint32 `protobuf:"varint,8,opt,name=sugar_mill,json=sugarMill,proto3" json:"sugar_mill,omitempty"`
	Hospice          uint32 `protobuf:"varint,9,opt,name=hospice,proto3" json:"hospice,omitempty"`
	Office           uint32 `protobuf:"varint,10,opt,name=office,proto3" json:"office,omitempty"`
	LargeMarket      uint32 `protobuf:"varint,11,opt,name=large_market,json=largeMarket,proto3" json:"large_market,omitempty"`
	LargeWarhouse    uint32 `protobuf:"varint,12,opt,name=large_warhouse,json=largeWarhouse,proto3" json:"large_warhouse,omitempty"`
	TobaccoStorage   uint32 `protobuf:"varint,13,opt,name=tobacco_storage,json=tobaccoStorage,proto3" json:"tobacco_storage,omitempty"`
	CoffeeRoaster    uint32 `protobuf:"varint,14,opt,name=coffee_roaster,json=coffeeRoaster,proto3" json:"coffee_roaster,omitempty"`
	Factory          uint32 `protobuf:"varint,15,opt,name=factory,proto3" json:"factory,omitempty"`
	University       uint32 `protobuf:"varint,16,opt,name=university,proto3" json:"university,omitempty"`
	Harbor           uint32 `protobuf:"varint,17,opt,name=harbor,proto3" json:"harbor,omitempty"`
	Wharf            uint32 `protobuf:"varint,18,opt,name=wharf,proto3" json:"wharf,omitempty"`
	BuildHall        uint32 `protobuf:"varint,19,opt,name=build_hall,json=buildHall,proto3" json:"build_hall,omitempty"`
	Residence        uint32 `protobuf:"varint,20,opt,name=residence,proto3" json:"residence,omitempty"`
	Fortress         uint32 `protobuf:"varint,21,opt,name=fortress,proto3" json:"fortress,omitempty"`
}

func (x *State_Buildings) Reset() {
	*x = State_Buildings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *State_Buildings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State_Buildings) ProtoMessage() {}

func (x *State_Buildings) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State_Buildings.ProtoReflect.Descriptor instead.
func (*State_Buildings) Descriptor() ([]byte, []int) {
	return file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_rawDescGZIP(), []int{0, 4}
}

func (x *State_Buildings) GetSmallIndigoPlant() uint32 {
	if x != nil {
		return x.SmallIndigoPlant
	}
	return 0
}

func (x *State_Buildings) GetSmallSugarMill() uint32 {
	if x != nil {
		return x.SmallSugarMill
	}
	return 0
}

func (x *State_Buildings) GetSmallMarket() uint32 {
	if x != nil {
		return x.SmallMarket
	}
	return 0
}

func (x *State_Buildings) GetHacienda() uint32 {
	if x != nil {
		return x.Hacienda
	}
	return 0
}

func (x *State_Buildings) GetConstructionHut() uint32 {
	if x != nil {
		return x.ConstructionHut
	}
	return 0
}

func (x *State_Buildings) GetSmallWarehouse() uint32 {
	if x != nil {
		return x.SmallWarehouse
	}
	return 0
}

func (x *State_Buildings) GetIndigoPlant() uint32 {
	if x != nil {
		return x.IndigoPlant
	}
	return 0
}

func (x *State_Buildings) GetSugarMill() uint32 {
	if x != nil {
		return x.SugarMill
	}
	return 0
}

func (x *State_Buildings) GetHospice() uint32 {
	if x != nil {
		return x.Hospice
	}
	return 0
}

func (x *State_Buildings) GetOffice() uint32 {
	if x != nil {
		return x.Office
	}
	return 0
}

func (x *State_Buildings) GetLargeMarket() uint32 {
	if x != nil {
		return x.LargeMarket
	}
	return 0
}

func (x *State_Buildings) GetLargeWarhouse() uint32 {
	if x != nil {
		return x.LargeWarhouse
	}
	return 0
}

func (x *State_Buildings) GetTobaccoStorage() uint32 {
	if x != nil {
		return x.TobaccoStorage
	}
	return 0
}

func (x *State_Buildings) GetCoffeeRoaster() uint32 {
	if x != nil {
		return x.CoffeeRoaster
	}
	return 0
}

func (x *State_Buildings) GetFactory() uint32 {
	if x != nil {
		return x.Factory
	}
	return 0
}

func (x *State_Buildings) GetUniversity() uint32 {
	if x != nil {
		return x.University
	}
	return 0
}

func (x *State_Buildings) GetHarbor() uint32 {
	if x != nil {
		return x.Harbor
	}
	return 0
}

func (x *State_Buildings) GetWharf() uint32 {
	if x != nil {
		return x.Wharf
	}
	return 0
}

func (x *State_Buildings) GetBuildHall() uint32 {
	if x != nil {
		return x.BuildHall
	}
	return 0
}

func (x *State_Buildings) GetResidence() uint32 {
	if x != nil {
		return x.Residence
	}
	return 0
}

func (x *State_Buildings) GetFortress() uint32 {
	if x != nil {
		return x.Fortress
	}
	return 0
}

type State_CargoShips struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ship_4 *CargoShip `protobuf:"bytes,4,opt,name=ship_4,json=ship4,proto3" json:"ship_4,omitempty"`
	Ship_5 *CargoShip `protobuf:"bytes,5,opt,name=ship_5,json=ship5,proto3" json:"ship_5,omitempty"`
	Ship_6 *CargoShip `protobuf:"bytes,6,opt,name=ship_6,json=ship6,proto3" json:"ship_6,omitempty"`
	Ship_7 *CargoShip `protobuf:"bytes,7,opt,name=ship_7,json=ship7,proto3" json:"ship_7,omitempty"`
	Ship_8 *CargoShip `protobuf:"bytes,8,opt,name=ship_8,json=ship8,proto3" json:"ship_8,omitempty"`
}

func (x *State_CargoShips) Reset() {
	*x = State_CargoShips{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *State_CargoShips) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State_CargoShips) ProtoMessage() {}

func (x *State_CargoShips) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State_CargoShips.ProtoReflect.Descriptor instead.
func (*State_CargoShips) Descriptor() ([]byte, []int) {
	return file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_rawDescGZIP(), []int{0, 5}
}

func (x *State_CargoShips) GetShip_4() *CargoShip {
	if x != nil {
		return x.Ship_4
	}
	return nil
}

func (x *State_CargoShips) GetShip_5() *CargoShip {
	if x != nil {
		return x.Ship_5
	}
	return nil
}

func (x *State_CargoShips) GetShip_6() *CargoShip {
	if x != nil {
		return x.Ship_6
	}
	return nil
}

func (x *State_CargoShips) GetShip_7() *CargoShip {
	if x != nil {
		return x.Ship_7
	}
	return nil
}

func (x *State_CargoShips) GetShip_8() *CargoShip {
	if x != nil {
		return x.Ship_8
	}
	return nil
}

type State_Plantations_Displayed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tile_1 PlantationID `protobuf:"varint,1,opt,name=tile_1,json=tile1,proto3,enum=puerto_rico_game.PlantationID" json:"tile_1,omitempty"`
	Tile_2 PlantationID `protobuf:"varint,2,opt,name=tile_2,json=tile2,proto3,enum=puerto_rico_game.PlantationID" json:"tile_2,omitempty"`
	Tile_3 PlantationID `protobuf:"varint,3,opt,name=tile_3,json=tile3,proto3,enum=puerto_rico_game.PlantationID" json:"tile_3,omitempty"`
	Tile_4 PlantationID `protobuf:"varint,4,opt,name=tile_4,json=tile4,proto3,enum=puerto_rico_game.PlantationID" json:"tile_4,omitempty"`
	Tile_5 PlantationID `protobuf:"varint,5,opt,name=tile_5,json=tile5,proto3,enum=puerto_rico_game.PlantationID" json:"tile_5,omitempty"`
}

func (x *State_Plantations_Displayed) Reset() {
	*x = State_Plantations_Displayed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *State_Plantations_Displayed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State_Plantations_Displayed) ProtoMessage() {}

func (x *State_Plantations_Displayed) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State_Plantations_Displayed.ProtoReflect.Descriptor instead.
func (*State_Plantations_Displayed) Descriptor() ([]byte, []int) {
	return file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *State_Plantations_Displayed) GetTile_1() PlantationID {
	if x != nil {
		return x.Tile_1
	}
	return PlantationID_NO_PLANTATION
}

func (x *State_Plantations_Displayed) GetTile_2() PlantationID {
	if x != nil {
		return x.Tile_2
	}
	return PlantationID_NO_PLANTATION
}

func (x *State_Plantations_Displayed) GetTile_3() PlantationID {
	if x != nil {
		return x.Tile_3
	}
	return PlantationID_NO_PLANTATION
}

func (x *State_Plantations_Displayed) GetTile_4() PlantationID {
	if x != nil {
		return x.Tile_4
	}
	return PlantationID_NO_PLANTATION
}

func (x *State_Plantations_Displayed) GetTile_5() PlantationID {
	if x != nil {
		return x.Tile_5
	}
	return PlantationID_NO_PLANTATION
}

type State_Plantations_Counts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Corn    uint32 `protobuf:"varint,1,opt,name=corn,proto3" json:"corn,omitempty"`
	Indigo  uint32 `protobuf:"varint,2,opt,name=indigo,proto3" json:"indigo,omitempty"`
	Sugar   uint32 `protobuf:"varint,3,opt,name=sugar,proto3" json:"sugar,omitempty"`
	Tobacco uint32 `protobuf:"varint,4,opt,name=tobacco,proto3" json:"tobacco,omitempty"`
	Coffee  uint32 `protobuf:"varint,5,opt,name=coffee,proto3" json:"coffee,omitempty"`
}

func (x *State_Plantations_Counts) Reset() {
	*x = State_Plantations_Counts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *State_Plantations_Counts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State_Plantations_Counts) ProtoMessage() {}

func (x *State_Plantations_Counts) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State_Plantations_Counts.ProtoReflect.Descriptor instead.
func (*State_Plantations_Counts) Descriptor() ([]byte, []int) {
	return file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_rawDescGZIP(), []int{0, 2, 1}
}

func (x *State_Plantations_Counts) GetCorn() uint32 {
	if x != nil {
		return x.Corn
	}
	return 0
}

func (x *State_Plantations_Counts) GetIndigo() uint32 {
	if x != nil {
		return x.Indigo
	}
	return 0
}

func (x *State_Plantations_Counts) GetSugar() uint32 {
	if x != nil {
		return x.Sugar
	}
	return 0
}

func (x *State_Plantations_Counts) GetTobacco() uint32 {
	if x != nil {
		return x.Tobacco
	}
	return 0
}

func (x *State_Plantations_Counts) GetCoffee() uint32 {
	if x != nil {
		return x.Coffee
	}
	return 0
}

var File_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto protoreflect.FileDescriptor

var file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_rawDesc = []byte{
	0x0a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6e, 0x67,
	0x65, 0x6c, 0x62, 0x65, 0x6c, 0x74, 0x72, 0x61, 0x6e, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x2d, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2f, 0x70,
	0x75, 0x65, 0x72, 0x74, 0x6f, 0x2d, 0x72, 0x69, 0x63, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72,
	0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x49, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x62, 0x65, 0x6c, 0x74,
	0x72, 0x61, 0x6e, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x2d, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2f, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x2d,
	0x72, 0x69, 0x63, 0x6f, 0x2f, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x49, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x62, 0x65, 0x6c, 0x74, 0x72, 0x61, 0x6e, 0x2f, 0x67,
	0x61, 0x6d, 0x65, 0x2d, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x2f, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x2d, 0x72, 0x69, 0x63, 0x6f, 0x2f,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6e, 0x67,
	0x65, 0x6c, 0x62, 0x65, 0x6c, 0x74, 0x72, 0x61, 0x6e, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x2d, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2f, 0x70,
	0x75, 0x65, 0x72, 0x74, 0x6f, 0x2d, 0x72, 0x69, 0x63, 0x6f, 0x2f, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x62, 0x65, 0x6c, 0x74, 0x72, 0x61, 0x6e,
	0x2f, 0x67, 0x61, 0x6d, 0x65, 0x2d, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2f, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x2d, 0x72, 0x69, 0x63,
	0x6f, 0x2f, 0x72, 0x6f, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x45, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x62, 0x65,
	0x6c, 0x74, 0x72, 0x61, 0x6e, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x2d, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x61, 0x6d,
	0x65, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xef, 0x18, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x75, 0x72, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72,
	0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x44, 0x52, 0x04, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x36, 0x0a, 0x08, 0x67, 0x6f, 0x76, 0x65, 0x72,
	0x6e, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x75, 0x65, 0x72,
	0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x44, 0x52, 0x08, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6f, 0x72, 0x12,
	0x39, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x72, 0x6f,
	0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x75, 0x65, 0x72,
	0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x72, 0x72, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x71, 0x75, 0x61, 0x72, 0x72, 0x69, 0x65, 0x73, 0x12, 0x45, 0x0a, 0x0b, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x73,
	0x52, 0x05, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x3f, 0x0a, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x75, 0x65,
	0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x09, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x43, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x67,
	0x6f, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x61, 0x72, 0x67, 0x6f, 0x53, 0x68, 0x69, 0x70,
	0x73, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x53, 0x68, 0x69, 0x70, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x73, 0x74, 0x53, 0x68,
	0x69, 0x70, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x73, 0x74, 0x73, 0x5f,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x12, 0x63, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x73, 0x74, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x76, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x76, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x1a, 0xb1, 0x02,
	0x0a, 0x07, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x75,
	0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x31, 0x12, 0x33,
	0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x32, 0x12, 0x33, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x33, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72,
	0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52,
	0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x33, 0x12, 0x33, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x75, 0x65,
	0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x34, 0x12, 0x33, 0x0a,
	0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x35, 0x3a, 0x1d, 0xa2, 0xb5, 0x18, 0x19, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72,
	0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49,
	0x44, 0x1a, 0xa5, 0x03, 0x0a, 0x05, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x31, 0x12, 0x38, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x75, 0x65,
	0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x12,
	0x30, 0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65,
	0x72, 0x12, 0x30, 0x0a, 0x07, 0x63, 0x61, 0x70, 0x74, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f,
	0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x07, 0x63, 0x61, 0x70, 0x74,
	0x61, 0x69, 0x6e, 0x12, 0x34, 0x0a, 0x09, 0x63, 0x72, 0x61, 0x66, 0x74, 0x73, 0x6d, 0x61, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f,
	0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x09,
	0x63, 0x72, 0x61, 0x66, 0x74, 0x73, 0x6d, 0x61, 0x6e, 0x12, 0x2c, 0x0a, 0x05, 0x6d, 0x61, 0x79,
	0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x75, 0x65, 0x72, 0x74,
	0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x52, 0x6f, 0x6c, 0x65,
	0x52, 0x05, 0x6d, 0x61, 0x79, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x75, 0x65, 0x72, 0x74,
	0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x52, 0x6f, 0x6c, 0x65,
	0x52, 0x07, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x06, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x75, 0x65, 0x72,
	0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x52, 0x6f, 0x6c,
	0x65, 0x52, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x1a, 0x8b, 0x05, 0x0a, 0x0b, 0x50, 0x6c,
	0x61, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4b, 0x0a, 0x09, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70,
	0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x52, 0x09, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x08, 0x66, 0x61, 0x63, 0x65, 0x64, 0x6f,
	0x77, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x75, 0x65, 0x72, 0x74,
	0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x52, 0x08, 0x66, 0x61, 0x63, 0x65, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x48,
	0x0a, 0x09, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x09, 0x64,
	0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x65, 0x64, 0x1a, 0x9e, 0x02, 0x0a, 0x09, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x06, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x31,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f,
	0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x05, 0x74, 0x69, 0x6c, 0x65, 0x31, 0x12, 0x35, 0x0a,
	0x06, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x05, 0x74,
	0x69, 0x6c, 0x65, 0x32, 0x12, 0x35, 0x0a, 0x06, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x33, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69,
	0x63, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x52, 0x05, 0x74, 0x69, 0x6c, 0x65, 0x33, 0x12, 0x35, 0x0a, 0x06, 0x74,
	0x69, 0x6c, 0x65, 0x5f, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x75,
	0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x50,
	0x6c, 0x61, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x05, 0x74, 0x69, 0x6c,
	0x65, 0x34, 0x12, 0x35, 0x0a, 0x06, 0x74, 0x69, 0x6c, 0x65, 0x5f, 0x35, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f,
	0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x52, 0x05, 0x74, 0x69, 0x6c, 0x65, 0x35, 0x1a, 0x7c, 0x0a, 0x06, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x63, 0x6f, 0x72, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x64, 0x69, 0x67,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x6e, 0x64, 0x69, 0x67, 0x6f, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x75, 0x67, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x73, 0x75, 0x67, 0x61, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x62, 0x61, 0x63, 0x63, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x6f, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x63, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x1a, 0x7b, 0x0a, 0x05, 0x47, 0x6f, 0x6f, 0x64, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x63, 0x6f, 0x72, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x64, 0x69, 0x67, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x69, 0x6e, 0x64, 0x69, 0x67, 0x6f, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x75, 0x67, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x75, 0x67,
	0x61, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x74, 0x6f, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x6f,
	0x66, 0x66, 0x65, 0x65, 0x1a, 0xc5, 0x05, 0x0a, 0x09, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x69,
	0x67, 0x6f, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x69, 0x67, 0x6f, 0x50, 0x6c, 0x61, 0x6e, 0x74,
	0x12, 0x28, 0x0a, 0x10, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x75, 0x67, 0x61, 0x72, 0x5f,
	0x6d, 0x69, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73, 0x6d, 0x61, 0x6c,
	0x6c, 0x53, 0x75, 0x67, 0x61, 0x72, 0x4d, 0x69, 0x6c, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6d,
	0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x68, 0x61, 0x63, 0x69, 0x65, 0x6e, 0x64, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x68, 0x61, 0x63, 0x69, 0x65, 0x6e, 0x64, 0x61, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x75, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x75, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x5f, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x73,
	0x6d, 0x61, 0x6c, 0x6c, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x6e, 0x64, 0x69, 0x67, 0x6f, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x6e, 0x64, 0x69, 0x67, 0x6f, 0x50, 0x6c, 0x61, 0x6e, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x75, 0x67, 0x61, 0x72, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x75, 0x67, 0x61, 0x72, 0x4d, 0x69, 0x6c, 0x6c, 0x12,
	0x18, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x70, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x68, 0x6f, 0x73, 0x70, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x69, 0x63,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x77, 0x61,
	0x72, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6c, 0x61,
	0x72, 0x67, 0x65, 0x57, 0x61, 0x72, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74,
	0x6f, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x62, 0x61, 0x63, 0x63, 0x6f, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x66, 0x66, 0x65, 0x65, 0x5f, 0x72,
	0x6f, 0x61, 0x73, 0x74, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6f,
	0x66, 0x66, 0x65, 0x65, 0x52, 0x6f, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x66,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x72, 0x62, 0x6f, 0x72, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x61, 0x72, 0x62, 0x6f, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x77, 0x68, 0x61, 0x72, 0x66, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x77, 0x68,
	0x61, 0x72, 0x66, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x68, 0x61, 0x6c,
	0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x48, 0x61,
	0x6c, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x73, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6f, 0x72, 0x74, 0x72, 0x65, 0x73, 0x73, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x74, 0x72, 0x65, 0x73, 0x73, 0x1a, 0x90, 0x02, 0x0a,
	0x0a, 0x43, 0x61, 0x72, 0x67, 0x6f, 0x53, 0x68, 0x69, 0x70, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x73,
	0x68, 0x69, 0x70, 0x5f, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x75,
	0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x43,
	0x61, 0x72, 0x67, 0x6f, 0x53, 0x68, 0x69, 0x70, 0x52, 0x05, 0x73, 0x68, 0x69, 0x70, 0x34, 0x12,
	0x32, 0x0a, 0x06, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x43, 0x61, 0x72, 0x67, 0x6f, 0x53, 0x68, 0x69, 0x70, 0x52, 0x05, 0x73, 0x68,
	0x69, 0x70, 0x35, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x68, 0x69, 0x70, 0x5f, 0x36, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63,
	0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x43, 0x61, 0x72, 0x67, 0x6f, 0x53, 0x68, 0x69, 0x70,
	0x52, 0x05, 0x73, 0x68, 0x69, 0x70, 0x36, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x68, 0x69, 0x70, 0x5f,
	0x37, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f,
	0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x43, 0x61, 0x72, 0x67, 0x6f,
	0x53, 0x68, 0x69, 0x70, 0x52, 0x05, 0x73, 0x68, 0x69, 0x70, 0x37, 0x12, 0x32, 0x0a, 0x06, 0x73,
	0x68, 0x69, 0x70, 0x5f, 0x38, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x75,
	0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x43,
	0x61, 0x72, 0x67, 0x6f, 0x53, 0x68, 0x69, 0x70, 0x52, 0x05, 0x73, 0x68, 0x69, 0x70, 0x38, 0x3a,
	0x04, 0x90, 0xb5, 0x18, 0x01, 0x42, 0x49, 0x5a, 0x47, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x62, 0x65, 0x6c, 0x74, 0x72, 0x61, 0x6e,
	0x2f, 0x67, 0x61, 0x6d, 0x65, 0x2d, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2f, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x2d, 0x72, 0x69, 0x63,
	0x6f, 0x2f, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_rawDescOnce sync.Once
	file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_rawDescData = file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_rawDesc
)

func file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_rawDescGZIP() []byte {
	file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_rawDescOnce.Do(func() {
		file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_rawDescData)
	})
	return file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_rawDescData
}

var file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_goTypes = []interface{}{
	(*State)(nil),                       // 0: puerto_rico_game.State
	(*State_Players)(nil),               // 1: puerto_rico_game.State.Players
	(*State_Roles)(nil),                 // 2: puerto_rico_game.State.Roles
	(*State_Plantations)(nil),           // 3: puerto_rico_game.State.Plantations
	(*State_Goods)(nil),                 // 4: puerto_rico_game.State.Goods
	(*State_Buildings)(nil),             // 5: puerto_rico_game.State.Buildings
	(*State_CargoShips)(nil),            // 6: puerto_rico_game.State.CargoShips
	(*State_Plantations_Displayed)(nil), // 7: puerto_rico_game.State.Plantations.Displayed
	(*State_Plantations_Counts)(nil),    // 8: puerto_rico_game.State.Plantations.Counts
	(PlayerID)(0),                       // 9: puerto_rico_game.PlayerID
	(*Player)(nil),                      // 10: puerto_rico_game.Player
	(*Role)(nil),                        // 11: puerto_rico_game.Role
	(*CargoShip)(nil),                   // 12: puerto_rico_game.CargoShip
	(PlantationID)(0),                   // 13: puerto_rico_game.PlantationID
}
var file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_depIdxs = []int32{
	9,  // 0: puerto_rico_game.State.turn:type_name -> puerto_rico_game.PlayerID
	9,  // 1: puerto_rico_game.State.governor:type_name -> puerto_rico_game.PlayerID
	1,  // 2: puerto_rico_game.State.players:type_name -> puerto_rico_game.State.Players
	2,  // 3: puerto_rico_game.State.roles:type_name -> puerto_rico_game.State.Roles
	3,  // 4: puerto_rico_game.State.plantations:type_name -> puerto_rico_game.State.Plantations
	4,  // 5: puerto_rico_game.State.goods:type_name -> puerto_rico_game.State.Goods
	5,  // 6: puerto_rico_game.State.buildings:type_name -> puerto_rico_game.State.Buildings
	6,  // 7: puerto_rico_game.State.cargo_ships:type_name -> puerto_rico_game.State.CargoShips
	10, // 8: puerto_rico_game.State.Players.player_1:type_name -> puerto_rico_game.Player
	10, // 9: puerto_rico_game.State.Players.player_2:type_name -> puerto_rico_game.Player
	10, // 10: puerto_rico_game.State.Players.player_3:type_name -> puerto_rico_game.Player
	10, // 11: puerto_rico_game.State.Players.player_4:type_name -> puerto_rico_game.Player
	10, // 12: puerto_rico_game.State.Players.player_5:type_name -> puerto_rico_game.Player
	11, // 13: puerto_rico_game.State.Roles.prospector1:type_name -> puerto_rico_game.Role
	11, // 14: puerto_rico_game.State.Roles.prospector2:type_name -> puerto_rico_game.Role
	11, // 15: puerto_rico_game.State.Roles.builder:type_name -> puerto_rico_game.Role
	11, // 16: puerto_rico_game.State.Roles.captain:type_name -> puerto_rico_game.Role
	11, // 17: puerto_rico_game.State.Roles.craftsman:type_name -> puerto_rico_game.Role
	11, // 18: puerto_rico_game.State.Roles.mayor:type_name -> puerto_rico_game.Role
	11, // 19: puerto_rico_game.State.Roles.settler:type_name -> puerto_rico_game.Role
	11, // 20: puerto_rico_game.State.Roles.trader:type_name -> puerto_rico_game.Role
	7,  // 21: puerto_rico_game.State.Plantations.displayed:type_name -> puerto_rico_game.State.Plantations.Displayed
	8,  // 22: puerto_rico_game.State.Plantations.facedown:type_name -> puerto_rico_game.State.Plantations.Counts
	8,  // 23: puerto_rico_game.State.Plantations.discarded:type_name -> puerto_rico_game.State.Plantations.Counts
	12, // 24: puerto_rico_game.State.CargoShips.ship_4:type_name -> puerto_rico_game.CargoShip
	12, // 25: puerto_rico_game.State.CargoShips.ship_5:type_name -> puerto_rico_game.CargoShip
	12, // 26: puerto_rico_game.State.CargoShips.ship_6:type_name -> puerto_rico_game.CargoShip
	12, // 27: puerto_rico_game.State.CargoShips.ship_7:type_name -> puerto_rico_game.CargoShip
	12, // 28: puerto_rico_game.State.CargoShips.ship_8:type_name -> puerto_rico_game.CargoShip
	13, // 29: puerto_rico_game.State.Plantations.Displayed.tile_1:type_name -> puerto_rico_game.PlantationID
	13, // 30: puerto_rico_game.State.Plantations.Displayed.tile_2:type_name -> puerto_rico_game.PlantationID
	13, // 31: puerto_rico_game.State.Plantations.Displayed.tile_3:type_name -> puerto_rico_game.PlantationID
	13, // 32: puerto_rico_game.State.Plantations.Displayed.tile_4:type_name -> puerto_rico_game.PlantationID
	13, // 33: puerto_rico_game.State.Plantations.Displayed.tile_5:type_name -> puerto_rico_game.PlantationID
	34, // [34:34] is the sub-list for method output_type
	34, // [34:34] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_init() }
func file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_init() {
	if File_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto != nil {
		return
	}
	file_github_com_angelbeltran_game_engine_examples_puerto_rico_cargo_ship_proto_init()
	file_github_com_angelbeltran_game_engine_examples_puerto_rico_plantation_proto_init()
	file_github_com_angelbeltran_game_engine_examples_puerto_rico_player_proto_init()
	file_github_com_angelbeltran_game_engine_examples_puerto_rico_role_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*State_Players); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*State_Roles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*State_Plantations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*State_Goods); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*State_Buildings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*State_CargoShips); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*State_Plantations_Displayed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*State_Plantations_Counts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_goTypes,
		DependencyIndexes: file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_depIdxs,
		MessageInfos:      file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_msgTypes,
	}.Build()
	File_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto = out.File
	file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_rawDesc = nil
	file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_goTypes = nil
	file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_depIdxs = nil
}
