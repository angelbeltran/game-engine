// Generated by protoc-gen-game. DO NOT EDIT.
package puerto_rico_pb

import (
	"context"
	"fmt"
	"github.com/angelbeltran/game-engine/protoc-gen-game/game_engine_pb"
	"github.com/angelbeltran/game-engine/protoc-gen-game/proto-generation/go_func"
	"google.golang.org/grpc"
	"net"
	"sync"
)

func NewServer(port uint) (*grpc.Server, net.Listener, error) {
	lis, err := net.Listen("tcp", fmt.Sprintf(":%d", port))
	if err != nil {
		return nil, nil, err
	}

	srv := grpc.NewServer()
	RegisterActionsServer(srv, new(gameEngine))

	return srv, lis, nil
}

type gameEngine struct {
	UnimplementedActionsServer
}

func (e *gameEngine) SetPlayers(ctx context.Context, in *Count) (*Response, error) {
	state.Lock()
	defer state.Unlock()

	// Enforce the rules

	allowed := go_func.BoolAndBoolToBool_AND(bool(go_func.BoolToBool_NOT(bool(state.Started))), bool(go_func.IntAndIntToBool_LTE(int(3), int(in.Count))),
	)
	if !allowed {
		return &Response{
			Error: &game_engine_pb.Error{
				Code: "826de622-ad54-4b65-3395-bb4d3828e67b",
				Msg:  "dummy error",
			},
		}, nil
	}

	// Apply any effects

	state.Players.Player_1.Present = go_func.IntAndIntToBool_LTE(int(3), int(in.Count))

	state.Players.Player_2.Present = go_func.IntAndIntToBool_LTE(int(3), int(in.Count))

	state.Players.Player_3.Present = go_func.IntAndIntToBool_LTE(int(3), int(in.Count))

	state.Players.Player_4.Present = go_func.IntAndIntToBool_LTE(int(4), int(in.Count))

	state.Players.Player_5.Present = go_func.IntAndIntToBool_LTE(int(5), int(in.Count))

	// Construct the response
	res := NewResponse()
	res.State.Started = state.Started
	res.State.Players.Player_1.Present = state.Players.Player_1.Present
	res.State.Players.Player_2.Present = state.Players.Player_2.Present
	res.State.Players.Player_3.Present = state.Players.Player_3.Present
	res.State.Players.Player_4.Present = state.Players.Player_4.Present
	res.State.Players.Player_5.Present = state.Players.Player_5.Present

	return &res, nil
}

func (e *gameEngine) Start(ctx context.Context, in *EmptyMsg) (*Response, error) {
	state.Lock()
	defer state.Unlock()

	// Enforce the rules

	allowed := go_func.BoolAndBoolToBool_AND(bool(go_func.BoolToBool_NOT(bool(state.Started))), bool(go_func.BoolAndBoolToBool_AND(bool(state.Players.Player_1.Present), bool(go_func.BoolAndBoolToBool_AND(bool(state.Players.Player_2.Present), bool(go_func.BoolAndBoolToBool_AND(bool(state.Players.Player_3.Present), bool(go_func.BoolAndBoolToBool_OR(bool(state.Players.Player_4.Present), bool(go_func.BoolToBool_NOT(bool(state.Players.Player_5.Present))),
	)),
	)),
	)),
	)),
	)
	if !allowed {
		return &Response{
			Error: &game_engine_pb.Error{
				Code: "57e0c77b-3e2b-431c-c5ed-ee81a89d5ee6",
				Msg:  "game has already started",
			},
		}, nil
	}

	// Apply any effects

	state.Started = true

	// Construct the response
	res := NewResponse()
	res.State.Started = state.Started

	return &res, nil
}

func (e *gameEngine) Accept(ctx context.Context, in *RoleChoice) (*Response, error) {
	state.Lock()
	defer state.Unlock()

	// Enforce the rules

	allowed := go_func.BoolsToBool_AND(bool(state.Started), bool(go_func.BoolsToBool_OR(bool(go_func.BoolAndBoolToBool_AND(bool(go_func.IntAndIntToBool_EQ(int(1), int(in.Player))), bool(go_func.IntAndIntToBool_EQ(int(0), int(state.Players.Player_1.Role))),
	),
	), bool(go_func.BoolAndBoolToBool_AND(bool(go_func.IntAndIntToBool_EQ(int(2), int(in.Player))), bool(go_func.IntAndIntToBool_EQ(int(0), int(state.Players.Player_2.Role))),
	),
	), bool(go_func.BoolAndBoolToBool_AND(bool(go_func.IntAndIntToBool_EQ(int(3), int(in.Player))), bool(go_func.IntAndIntToBool_EQ(int(0), int(state.Players.Player_3.Role))),
	),
	), bool(go_func.BoolAndBoolToBool_AND(bool(go_func.IntAndIntToBool_EQ(int(4), int(in.Player))), bool(go_func.IntAndIntToBool_EQ(int(0), int(state.Players.Player_4.Role))),
	),
	), bool(go_func.BoolAndBoolToBool_AND(bool(go_func.IntAndIntToBool_EQ(int(5), int(in.Player))), bool(go_func.IntAndIntToBool_EQ(int(0), int(state.Players.Player_5.Role))),
	),
	),
	),
	), bool(go_func.BoolsToBool_OR(bool(go_func.BoolsToBool_AND(bool(go_func.IntAndIntToBool_EQ(int(1), int(in.Role)),
	), bool(go_func.BoolToBool_NOT(bool(state.Roles.Prospector1.Available)),
	),
	),
	), bool(go_func.BoolsToBool_AND(bool(go_func.IntAndIntToBool_EQ(int(2), int(in.Role)),
	), bool(go_func.BoolToBool_NOT(bool(state.Roles.Prospector2.Available)),
	),
	),
	), bool(go_func.BoolsToBool_AND(bool(go_func.IntAndIntToBool_EQ(int(3), int(in.Role)),
	), bool(go_func.BoolToBool_NOT(bool(state.Roles.Builder.Available)),
	),
	),
	), bool(go_func.BoolsToBool_AND(bool(go_func.IntAndIntToBool_EQ(int(4), int(in.Role)),
	), bool(go_func.BoolToBool_NOT(bool(state.Roles.Captain.Available)),
	),
	),
	), bool(go_func.BoolsToBool_AND(bool(go_func.IntAndIntToBool_EQ(int(5), int(in.Role)),
	), bool(go_func.BoolToBool_NOT(bool(state.Roles.Craftsman.Available)),
	),
	),
	), bool(go_func.BoolsToBool_AND(bool(go_func.IntAndIntToBool_EQ(int(6), int(in.Role)),
	), bool(go_func.BoolToBool_NOT(bool(state.Roles.Mayor.Available)),
	),
	),
	), bool(go_func.BoolsToBool_AND(bool(go_func.IntAndIntToBool_EQ(int(7), int(in.Role)),
	), bool(go_func.BoolToBool_NOT(bool(state.Roles.Settler.Available)),
	),
	),
	), bool(go_func.BoolsToBool_AND(bool(go_func.IntAndIntToBool_EQ(int(8), int(in.Role)),
	), bool(go_func.BoolToBool_NOT(bool(state.Roles.Trader.Available)),
	),
	),
	),
	),
	),
	)
	if !allowed {
		return &Response{
			Error: &game_engine_pb.Error{
				Code: "446eda13-7e86-40c5-55c0-ac363015f92d",
				Msg:  "dummy error",
			},
		}, nil
	}

	// Apply any effects

	state.Roles.Prospector1.Available = go_func.BoolAndBoolToBool_OR(bool(state.Roles.Prospector1.Available), bool(go_func.IntAndIntToBool_EQ(int(1), int(in.Role))),
	)

	state.Roles.Prospector2.Available = go_func.BoolAndBoolToBool_OR(bool(state.Roles.Prospector2.Available), bool(go_func.IntAndIntToBool_EQ(int(2), int(in.Role))),
	)

	state.Roles.Builder.Available = go_func.BoolAndBoolToBool_OR(bool(state.Roles.Builder.Available), bool(go_func.IntAndIntToBool_EQ(int(3), int(in.Role))),
	)

	state.Roles.Captain.Available = go_func.BoolAndBoolToBool_OR(bool(state.Roles.Captain.Available), bool(go_func.IntAndIntToBool_EQ(int(4), int(in.Role))),
	)

	state.Roles.Craftsman.Available = go_func.BoolAndBoolToBool_OR(bool(state.Roles.Craftsman.Available), bool(go_func.IntAndIntToBool_EQ(int(5), int(in.Role))),
	)

	state.Roles.Mayor.Available = go_func.BoolAndBoolToBool_OR(bool(state.Roles.Mayor.Available), bool(go_func.IntAndIntToBool_EQ(int(6), int(in.Role))),
	)

	state.Roles.Settler.Available = go_func.BoolAndBoolToBool_OR(bool(state.Roles.Settler.Available), bool(go_func.IntAndIntToBool_EQ(int(7), int(in.Role))),
	)

	state.Roles.Trader.Available = go_func.BoolAndBoolToBool_OR(bool(state.Roles.Trader.Available), bool(go_func.IntAndIntToBool_EQ(int(8), int(in.Role))),
	)

	// Construct the response
	res := NewResponse()

	return &res, nil
}

func (e *gameEngine) Purchase(ctx context.Context, in *BuildingChoice) (*Response, error) {

	return &Response{
		Error: &game_engine_pb.Error{
			Msg: "unimplemented",
		},
	}, nil
}

func (e *gameEngine) Load(ctx context.Context, in *GoodToShip) (*Response, error) {

	return &Response{
		Error: &game_engine_pb.Error{
			Msg: "unimplemented",
		},
	}, nil
}

func (e *gameEngine) Craft(ctx context.Context, in *EmptyMsg) (*Response, error) {

	return &Response{
		Error: &game_engine_pb.Error{
			Msg: "unimplemented",
		},
	}, nil
}

func (e *gameEngine) CraftExtra(ctx context.Context, in *GoodChoice) (*Response, error) {

	return &Response{
		Error: &game_engine_pb.Error{
			Msg: "unimplemented",
		},
	}, nil
}

func (e *gameEngine) WelcomeColonist(ctx context.Context, in *EmptyMsg) (*Response, error) {

	return &Response{
		Error: &game_engine_pb.Error{
			Msg: "unimplemented",
		},
	}, nil
}

func (e *gameEngine) WelcomeColonistFromSupply(ctx context.Context, in *EmptyMsg) (*Response, error) {

	return &Response{
		Error: &game_engine_pb.Error{
			Msg: "unimplemented",
		},
	}, nil
}

func (e *gameEngine) ApplyColonistToBuilding(ctx context.Context, in *BuildingChoice) (*Response, error) {

	return &Response{
		Error: &game_engine_pb.Error{
			Msg: "unimplemented",
		},
	}, nil
}

func (e *gameEngine) ApplyColonistToPlantation(ctx context.Context, in *PlantationChoice) (*Response, error) {

	return &Response{
		Error: &game_engine_pb.Error{
			Msg: "unimplemented",
		},
	}, nil
}

func (e *gameEngine) ApplyColonistToQuarry(ctx context.Context, in *EmptyMsg) (*Response, error) {

	return &Response{
		Error: &game_engine_pb.Error{
			Msg: "unimplemented",
		},
	}, nil
}

func (e *gameEngine) RefillColonistShip(ctx context.Context, in *EmptyMsg) (*Response, error) {

	return &Response{
		Error: &game_engine_pb.Error{
			Msg: "unimplemented",
		},
	}, nil
}

func (e *gameEngine) Settle(ctx context.Context, in *PlantationChoice) (*Response, error) {

	return &Response{
		Error: &game_engine_pb.Error{
			Msg: "unimplemented",
		},
	}, nil
}

func (e *gameEngine) ConstructQuarry(ctx context.Context, in *EmptyMsg) (*Response, error) {

	return &Response{
		Error: &game_engine_pb.Error{
			Msg: "unimplemented",
		},
	}, nil
}

func (e *gameEngine) Trade(ctx context.Context, in *GoodChoice) (*Response, error) {

	return &Response{
		Error: &game_engine_pb.Error{
			Msg: "unimplemented",
		},
	}, nil
}

func (e *gameEngine) EndAction(ctx context.Context, in *PlayerChoice) (*Response, error) {

	return &Response{
		Error: &game_engine_pb.Error{
			Msg: "unimplemented",
		},
	}, nil
}

var state = NewGameState()

type GameState struct {
	State
	sync.Mutex
}

func NewGameState() GameState {
	var s GameState

	s.State.Players = new(State_Players)
	s.State.Players.Player_1 = new(Player)
	s.State.Players.Player_1.Buildings = new(Player_Buildings)
	s.State.Players.Player_1.Plantations = new(Player_Plantations)
	s.State.Players.Player_1.Goods = new(Player_Goods)
	s.State.Players.Player_2 = new(Player)
	s.State.Players.Player_2.Buildings = new(Player_Buildings)
	s.State.Players.Player_2.Plantations = new(Player_Plantations)
	s.State.Players.Player_2.Goods = new(Player_Goods)
	s.State.Players.Player_3 = new(Player)
	s.State.Players.Player_3.Buildings = new(Player_Buildings)
	s.State.Players.Player_3.Plantations = new(Player_Plantations)
	s.State.Players.Player_3.Goods = new(Player_Goods)
	s.State.Players.Player_4 = new(Player)
	s.State.Players.Player_4.Buildings = new(Player_Buildings)
	s.State.Players.Player_4.Plantations = new(Player_Plantations)
	s.State.Players.Player_4.Goods = new(Player_Goods)
	s.State.Players.Player_5 = new(Player)
	s.State.Players.Player_5.Buildings = new(Player_Buildings)
	s.State.Players.Player_5.Plantations = new(Player_Plantations)
	s.State.Players.Player_5.Goods = new(Player_Goods)
	s.State.Roles = new(State_Roles)
	s.State.Roles.Prospector1 = new(Role)
	s.State.Roles.Prospector2 = new(Role)
	s.State.Roles.Builder = new(Role)
	s.State.Roles.Captain = new(Role)
	s.State.Roles.Craftsman = new(Role)
	s.State.Roles.Mayor = new(Role)
	s.State.Roles.Settler = new(Role)
	s.State.Roles.Trader = new(Role)
	s.State.Plantations = new(State_Plantations)
	s.State.Plantations.Displayed = new(State_Plantations_Displayed)
	s.State.Plantations.Facedown = new(State_Plantations_Counts)
	s.State.Plantations.Discarded = new(State_Plantations_Counts)
	s.State.Goods = new(State_Goods)
	s.State.Buildings = new(State_Buildings)
	s.State.CargoShips = new(State_CargoShips)
	s.State.CargoShips.Ship_4 = new(CargoShip)
	s.State.CargoShips.Ship_5 = new(CargoShip)
	s.State.CargoShips.Ship_6 = new(CargoShip)
	s.State.CargoShips.Ship_7 = new(CargoShip)
	s.State.CargoShips.Ship_8 = new(CargoShip)

	return s
}

func NewResponse() Response {
	var res Response

	res.State = new(State)
	res.State.Players = new(State_Players)
	res.State.Players.Player_1 = new(Player)
	res.State.Players.Player_1.Buildings = new(Player_Buildings)
	res.State.Players.Player_1.Plantations = new(Player_Plantations)
	res.State.Players.Player_1.Goods = new(Player_Goods)
	res.State.Players.Player_2 = new(Player)
	res.State.Players.Player_2.Buildings = new(Player_Buildings)
	res.State.Players.Player_2.Plantations = new(Player_Plantations)
	res.State.Players.Player_2.Goods = new(Player_Goods)
	res.State.Players.Player_3 = new(Player)
	res.State.Players.Player_3.Buildings = new(Player_Buildings)
	res.State.Players.Player_3.Plantations = new(Player_Plantations)
	res.State.Players.Player_3.Goods = new(Player_Goods)
	res.State.Players.Player_4 = new(Player)
	res.State.Players.Player_4.Buildings = new(Player_Buildings)
	res.State.Players.Player_4.Plantations = new(Player_Plantations)
	res.State.Players.Player_4.Goods = new(Player_Goods)
	res.State.Players.Player_5 = new(Player)
	res.State.Players.Player_5.Buildings = new(Player_Buildings)
	res.State.Players.Player_5.Plantations = new(Player_Plantations)
	res.State.Players.Player_5.Goods = new(Player_Goods)
	res.State.Roles = new(State_Roles)
	res.State.Roles.Prospector1 = new(Role)
	res.State.Roles.Prospector2 = new(Role)
	res.State.Roles.Builder = new(Role)
	res.State.Roles.Captain = new(Role)
	res.State.Roles.Craftsman = new(Role)
	res.State.Roles.Mayor = new(Role)
	res.State.Roles.Settler = new(Role)
	res.State.Roles.Trader = new(Role)
	res.State.Plantations = new(State_Plantations)
	res.State.Plantations.Displayed = new(State_Plantations_Displayed)
	res.State.Plantations.Facedown = new(State_Plantations_Counts)
	res.State.Plantations.Discarded = new(State_Plantations_Counts)
	res.State.Goods = new(State_Goods)
	res.State.Buildings = new(State_Buildings)
	res.State.CargoShips = new(State_CargoShips)
	res.State.CargoShips.Ship_4 = new(CargoShip)
	res.State.CargoShips.Ship_5 = new(CargoShip)
	res.State.CargoShips.Ship_6 = new(CargoShip)
	res.State.CargoShips.Ship_7 = new(CargoShip)
	res.State.CargoShips.Ship_8 = new(CargoShip)
	res.Error = new(game_engine_pb.Error)

	return res
}

//
// Enum Key Mappings
//

func PuertoRicoPbState_PlayersFieldByPlayerID(msg *State_Players, key PlayerID) (*Player, error) {
	switch key {
	case PlayerID_PLAYER_1:
		return msg.Player_1, nil
	case PlayerID_PLAYER_2:
		return msg.Player_2, nil
	case PlayerID_PLAYER_3:
		return msg.Player_3, nil
	case PlayerID_PLAYER_4:
		return msg.Player_4, nil
	case PlayerID_PLAYER_5:
		return msg.Player_5, nil
	}

	return nil, fmt.Errorf("unexpected PlayerID value: %v", key)
}
