// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.3
// source: github.com/angelbeltran/game-engine/examples/puerto-rico/actions.proto

package puerto_rico_pb

import (
	game_engine_pb "github.com/angelbeltran/game-engine/protoc-gen-game/game_engine_pb"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/protoc-gen-go/descriptor"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *State                `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Error *game_engine_pb.Error `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_rawDescGZIP(), []int{0}
}

func (x *Response) GetState() *State {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Response) GetError() *game_engine_pb.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

type EmptyMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyMsg) Reset() {
	*x = EmptyMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyMsg) ProtoMessage() {}

func (x *EmptyMsg) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyMsg.ProtoReflect.Descriptor instead.
func (*EmptyMsg) Descriptor() ([]byte, []int) {
	return file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_rawDescGZIP(), []int{1}
}

type Count struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count uint32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *Count) Reset() {
	*x = Count{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Count) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Count) ProtoMessage() {}

func (x *Count) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Count.ProtoReflect.Descriptor instead.
func (*Count) Descriptor() ([]byte, []int) {
	return file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_rawDescGZIP(), []int{2}
}

func (x *Count) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type RoleChoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player PlayerID `protobuf:"varint,1,opt,name=player,proto3,enum=puerto_rico_game.PlayerID" json:"player,omitempty"`
	Role   RoleID   `protobuf:"varint,2,opt,name=role,proto3,enum=puerto_rico_game.RoleID" json:"role,omitempty"`
}

func (x *RoleChoice) Reset() {
	*x = RoleChoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleChoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleChoice) ProtoMessage() {}

func (x *RoleChoice) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleChoice.ProtoReflect.Descriptor instead.
func (*RoleChoice) Descriptor() ([]byte, []int) {
	return file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_rawDescGZIP(), []int{3}
}

func (x *RoleChoice) GetPlayer() PlayerID {
	if x != nil {
		return x.Player
	}
	return PlayerID_NO_PLAYER
}

func (x *RoleChoice) GetRole() RoleID {
	if x != nil {
		return x.Role
	}
	return RoleID_NO_ROLE
}

type BuildingChoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Building Building `protobuf:"varint,1,opt,name=building,proto3,enum=puerto_rico_game.Building" json:"building,omitempty"`
}

func (x *BuildingChoice) Reset() {
	*x = BuildingChoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildingChoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildingChoice) ProtoMessage() {}

func (x *BuildingChoice) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildingChoice.ProtoReflect.Descriptor instead.
func (*BuildingChoice) Descriptor() ([]byte, []int) {
	return file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_rawDescGZIP(), []int{4}
}

func (x *BuildingChoice) GetBuilding() Building {
	if x != nil {
		return x.Building
	}
	return Building_NO_BUILDING
}

type GoodToShip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Good GoodID      `protobuf:"varint,1,opt,name=good,proto3,enum=puerto_rico_game.GoodID" json:"good,omitempty"`
	Ship CargoShipID `protobuf:"varint,2,opt,name=ship,proto3,enum=puerto_rico_game.CargoShipID" json:"ship,omitempty"`
}

func (x *GoodToShip) Reset() {
	*x = GoodToShip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodToShip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodToShip) ProtoMessage() {}

func (x *GoodToShip) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodToShip.ProtoReflect.Descriptor instead.
func (*GoodToShip) Descriptor() ([]byte, []int) {
	return file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_rawDescGZIP(), []int{5}
}

func (x *GoodToShip) GetGood() GoodID {
	if x != nil {
		return x.Good
	}
	return GoodID_NO_GOOD
}

func (x *GoodToShip) GetShip() CargoShipID {
	if x != nil {
		return x.Ship
	}
	return CargoShipID_NO_SHIP
}

type GoodChoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Good GoodID `protobuf:"varint,1,opt,name=good,proto3,enum=puerto_rico_game.GoodID" json:"good,omitempty"`
}

func (x *GoodChoice) Reset() {
	*x = GoodChoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodChoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodChoice) ProtoMessage() {}

func (x *GoodChoice) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodChoice.ProtoReflect.Descriptor instead.
func (*GoodChoice) Descriptor() ([]byte, []int) {
	return file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_rawDescGZIP(), []int{6}
}

func (x *GoodChoice) GetGood() GoodID {
	if x != nil {
		return x.Good
	}
	return GoodID_NO_GOOD
}

type PlantationChoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plantation PlantationID `protobuf:"varint,1,opt,name=plantation,proto3,enum=puerto_rico_game.PlantationID" json:"plantation,omitempty"`
}

func (x *PlantationChoice) Reset() {
	*x = PlantationChoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlantationChoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlantationChoice) ProtoMessage() {}

func (x *PlantationChoice) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlantationChoice.ProtoReflect.Descriptor instead.
func (*PlantationChoice) Descriptor() ([]byte, []int) {
	return file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_rawDescGZIP(), []int{7}
}

func (x *PlantationChoice) GetPlantation() PlantationID {
	if x != nil {
		return x.Plantation
	}
	return PlantationID_NO_PLANTATION
}

type PlayerChoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player PlayerID `protobuf:"varint,1,opt,name=player,proto3,enum=puerto_rico_game.PlayerID" json:"player,omitempty"`
}

func (x *PlayerChoice) Reset() {
	*x = PlayerChoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerChoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerChoice) ProtoMessage() {}

func (x *PlayerChoice) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerChoice.ProtoReflect.Descriptor instead.
func (*PlayerChoice) Descriptor() ([]byte, []int) {
	return file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_rawDescGZIP(), []int{8}
}

func (x *PlayerChoice) GetPlayer() PlayerID {
	if x != nil {
		return x.Player
	}
	return PlayerID_NO_PLAYER
}

var File_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto protoreflect.FileDescriptor

var file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_rawDesc = []byte{
	0x0a, 0x46, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6e, 0x67,
	0x65, 0x6c, 0x62, 0x65, 0x6c, 0x74, 0x72, 0x61, 0x6e, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x2d, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2f, 0x70,
	0x75, 0x65, 0x72, 0x74, 0x6f, 0x2d, 0x72, 0x69, 0x63, 0x6f, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f,
	0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x53, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x62, 0x65,
	0x6c, 0x74, 0x72, 0x61, 0x6e, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x2d, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x67, 0x61, 0x6d,
	0x65, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x2f, 0x64, 0x73, 0x74, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6e,
	0x67, 0x65, 0x6c, 0x62, 0x65, 0x6c, 0x74, 0x72, 0x61, 0x6e, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x2d,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2f,
	0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x2d, 0x72, 0x69, 0x63, 0x6f, 0x2f, 0x72, 0x6f, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x47, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x62, 0x65, 0x6c, 0x74, 0x72, 0x61, 0x6e, 0x2f,
	0x67, 0x61, 0x6d, 0x65, 0x2d, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x2f, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x2d, 0x72, 0x69, 0x63, 0x6f,
	0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6e, 0x67, 0x65,
	0x6c, 0x62, 0x65, 0x6c, 0x74, 0x72, 0x61, 0x6e, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x2d, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2f, 0x70, 0x75,
	0x65, 0x72, 0x74, 0x6f, 0x2d, 0x72, 0x69, 0x63, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x62, 0x65, 0x6c, 0x74, 0x72, 0x61, 0x6e, 0x2f, 0x67, 0x61,
	0x6d, 0x65, 0x2d, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x2f, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x2d, 0x72, 0x69, 0x63, 0x6f, 0x2f, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x49, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x62, 0x65, 0x6c,
	0x74, 0x72, 0x61, 0x6e, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x2d, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2f, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f,
	0x2d, 0x72, 0x69, 0x63, 0x6f, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x49, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x62, 0x65, 0x6c, 0x74, 0x72, 0x61, 0x6e, 0x2f,
	0x67, 0x61, 0x6d, 0x65, 0x2d, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x2f, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x2d, 0x72, 0x69, 0x63, 0x6f,
	0x2f, 0x63, 0x61, 0x72, 0x67, 0x6f, 0x5f, 0x73, 0x68, 0x69, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6e,
	0x67, 0x65, 0x6c, 0x62, 0x65, 0x6c, 0x74, 0x72, 0x61, 0x6e, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x2d,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2f,
	0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x2d, 0x72, 0x69, 0x63, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x69, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f,
	0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x3a, 0x04, 0x98, 0xb5,
	0x18, 0x01, 0x22, 0x0a, 0x0a, 0x08, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x22, 0x1d,
	0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6e, 0x0a,
	0x0a, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x75,
	0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12,
	0x2c, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x44, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x48, 0x0a,
	0x0e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12,
	0x36, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x6d, 0x0a, 0x0a, 0x47, 0x6f, 0x6f, 0x64, 0x54,
	0x6f, 0x53, 0x68, 0x69, 0x70, 0x12, 0x2c, 0x0a, 0x04, 0x67, 0x6f, 0x6f, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63,
	0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x52, 0x04, 0x67,
	0x6f, 0x6f, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x73, 0x68, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x43, 0x61, 0x72, 0x67, 0x6f, 0x53, 0x68, 0x69, 0x70, 0x49, 0x44,
	0x52, 0x04, 0x73, 0x68, 0x69, 0x70, 0x22, 0x3a, 0x0a, 0x0a, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x67, 0x6f, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f,
	0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x52, 0x04, 0x67, 0x6f,
	0x6f, 0x64, 0x22, 0x52, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x75, 0x65,
	0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x50, 0x6c,
	0x61, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x42, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f,
	0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x49, 0x44, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x32, 0xff, 0x1d, 0x0a, 0x07, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x89, 0x05, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x17, 0x2e, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72,
	0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x1a,
	0x2e, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61, 0x6d,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc5, 0x04, 0x8a, 0xb5, 0x18,
	0x28, 0x12, 0x26, 0xa2, 0x06, 0x23, 0x08, 0x07, 0x52, 0x0d, 0x08, 0x01, 0x1a, 0x09, 0x0a, 0x07,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0xfa, 0x83, 0x01, 0x0e, 0x08, 0x06, 0x10, 0x03, 0x8a,
	0x7d, 0x07, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x8a, 0xb5, 0x18, 0x37, 0x0a, 0x35, 0x0a,
	0x33, 0x0a, 0x1c, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x0a, 0x08, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x31, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12,
	0x13, 0x0a, 0x11, 0xfa, 0x06, 0x0e, 0x08, 0x06, 0x10, 0x03, 0x8a, 0x7d, 0x07, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x8a, 0xb5, 0x18, 0x37, 0x0a, 0x35, 0x0a, 0x33, 0x0a, 0x1c, 0x0a, 0x07,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x32, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x13, 0x0a, 0x11, 0xfa, 0x06,
	0x0e, 0x08, 0x06, 0x10, 0x03, 0x8a, 0x7d, 0x07, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x8a,
	0xb5, 0x18, 0x37, 0x0a, 0x35, 0x0a, 0x33, 0x0a, 0x1c, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x33, 0x0a, 0x07, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x13, 0x0a, 0x11, 0xfa, 0x06, 0x0e, 0x08, 0x06, 0x10, 0x03,
	0x8a, 0x7d, 0x07, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x8a, 0xb5, 0x18, 0x37, 0x0a, 0x35,
	0x0a, 0x33, 0x0a, 0x1c, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x0a, 0x08, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x34, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x12, 0x13, 0x0a, 0x11, 0xfa, 0x06, 0x0e, 0x08, 0x06, 0x10, 0x04, 0x8a, 0x7d, 0x07, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x8a, 0xb5, 0x18, 0x37, 0x0a, 0x35, 0x0a, 0x33, 0x0a, 0x1c, 0x0a,
	0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x5f, 0x35, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x13, 0x0a, 0x11, 0xfa,
	0x06, 0x0e, 0x08, 0x06, 0x10, 0x05, 0x8a, 0x7d, 0x07, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x8a, 0xb5, 0x18, 0x0b, 0x1a, 0x09, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x8a,
	0xb5, 0x18, 0x1e, 0x1a, 0x1c, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x0a, 0x08,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x31, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x8a, 0xb5, 0x18, 0x1e, 0x1a, 0x1c, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x32, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x8a, 0xb5, 0x18, 0x1e, 0x1a, 0x1c, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x73, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x33, 0x0a, 0x07, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x74, 0x8a, 0xb5, 0x18, 0x1e, 0x1a, 0x1c, 0x0a, 0x07, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x34, 0x0a, 0x07,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x8a, 0xb5, 0x18, 0x1e, 0x1a, 0x1c, 0x0a, 0x07, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x35,
	0x0a, 0x07, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x8a, 0xb5, 0x18, 0x35, 0x22, 0x33, 0x12,
	0x24, 0x38, 0x32, 0x36, 0x64, 0x65, 0x36, 0x32, 0x32, 0x2d, 0x61, 0x64, 0x35, 0x34, 0x2d, 0x34,
	0x62, 0x36, 0x35, 0x2d, 0x33, 0x33, 0x39, 0x35, 0x2d, 0x62, 0x62, 0x34, 0x64, 0x33, 0x38, 0x32,
	0x38, 0x65, 0x36, 0x37, 0x62, 0x1a, 0x0b, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x20, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x82, 0x03, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1a, 0x2e, 0x70,
	0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x1a, 0x1a, 0x2e, 0x70, 0x75, 0x65, 0x72, 0x74,
	0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc0, 0x02, 0x8a, 0xb5, 0x18, 0xcd, 0x01, 0x12, 0xca, 0x01, 0xa2,
	0x06, 0xc6, 0x01, 0x08, 0x07, 0x52, 0x0d, 0x08, 0x01, 0x1a, 0x09, 0x0a, 0x07, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0xa2, 0x83, 0x01, 0xb0, 0x01, 0x08, 0x07, 0x22, 0x1c, 0x0a, 0x07, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x31,
	0x0a, 0x07, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0xa2, 0x83, 0x01, 0x8b, 0x01, 0x08, 0x07,
	0x22, 0x1c, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x32, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0xa2, 0x83,
	0x01, 0x67, 0x08, 0x07, 0x22, 0x1c, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x0a,
	0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x33, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x74, 0xa2, 0x83, 0x01, 0x43, 0x08, 0x08, 0x22, 0x1c, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x73, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x34, 0x0a, 0x07, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0xd2, 0x7d, 0x20, 0x08, 0x01, 0x1a, 0x1c, 0x0a, 0x07, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x35,
	0x0a, 0x07, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x8a, 0xb5, 0x18, 0x15, 0x0a, 0x13, 0x0a,
	0x11, 0x0a, 0x09, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x04, 0x0a, 0x02,
	0x08, 0x01, 0x8a, 0xb5, 0x18, 0x0b, 0x1a, 0x09, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x8a, 0xb5, 0x18, 0x42, 0x22, 0x40, 0x12, 0x24, 0x35, 0x37, 0x65, 0x30, 0x63, 0x37, 0x37,
	0x62, 0x2d, 0x33, 0x65, 0x32, 0x62, 0x2d, 0x34, 0x33, 0x31, 0x63, 0x2d, 0x63, 0x35, 0x65, 0x64,
	0x2d, 0x65, 0x65, 0x38, 0x31, 0x61, 0x38, 0x39, 0x64, 0x35, 0x65, 0x65, 0x36, 0x1a, 0x18, 0x67,
	0x61, 0x6d, 0x65, 0x20, 0x68, 0x61, 0x73, 0x20, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x20,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0xb1, 0x0d, 0x0a, 0x06, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x12, 0x1c, 0x2e, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f,
	0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x1a, 0x1a, 0x2e, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xec, 0x0c, 0x8a,
	0xb5, 0x18, 0xc0, 0x06, 0x12, 0xbd, 0x06, 0xc2, 0x0c, 0xb9, 0x06, 0x08, 0x03, 0x12, 0x0b, 0x1a,
	0x09, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0xb7, 0x02, 0xc2, 0x0c, 0xb3,
	0x02, 0x08, 0x04, 0x12, 0x3b, 0xa2, 0x06, 0x38, 0x08, 0x07, 0xfa, 0x06, 0x0f, 0x08, 0x01, 0x10,
	0x01, 0x8a, 0x7d, 0x08, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0xfa, 0x83, 0x01, 0x20,
	0x08, 0x01, 0x10, 0x00, 0x92, 0x7d, 0x19, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x31, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x12, 0x3b, 0xa2, 0x06, 0x38, 0x08, 0x07, 0xfa, 0x06, 0x0f, 0x08, 0x01, 0x10, 0x02, 0x8a, 0x7d,
	0x08, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0xfa, 0x83, 0x01, 0x20, 0x08, 0x01, 0x10,
	0x00, 0x92, 0x7d, 0x19, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x0a, 0x08, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x32, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x3b, 0xa2,
	0x06, 0x38, 0x08, 0x07, 0xfa, 0x06, 0x0f, 0x08, 0x01, 0x10, 0x03, 0x8a, 0x7d, 0x08, 0x0a, 0x06,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0xfa, 0x83, 0x01, 0x20, 0x08, 0x01, 0x10, 0x00, 0x92, 0x7d,
	0x19, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x33, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x3b, 0xa2, 0x06, 0x38, 0x08,
	0x07, 0xfa, 0x06, 0x0f, 0x08, 0x01, 0x10, 0x04, 0x8a, 0x7d, 0x08, 0x0a, 0x06, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0xfa, 0x83, 0x01, 0x20, 0x08, 0x01, 0x10, 0x00, 0x92, 0x7d, 0x19, 0x0a, 0x07,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x34, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x3b, 0xa2, 0x06, 0x38, 0x08, 0x07, 0xfa, 0x06,
	0x0f, 0x08, 0x01, 0x10, 0x05, 0x8a, 0x7d, 0x08, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0xfa, 0x83, 0x01, 0x20, 0x08, 0x01, 0x10, 0x00, 0x92, 0x7d, 0x19, 0x0a, 0x07, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x35, 0x0a, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x12, 0xed, 0x03, 0xc2, 0x0c, 0xe9, 0x03, 0x08, 0x04, 0x12, 0x3e, 0xc2,
	0x0c, 0x3b, 0x08, 0x03, 0x12, 0x10, 0xfa, 0x06, 0x0d, 0x08, 0x01, 0x10, 0x01, 0x8a, 0x7d, 0x06,
	0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x25, 0x52, 0x23, 0x08, 0x01, 0x1a, 0x1f, 0x0a, 0x05,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x31, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3e, 0xc2,
	0x0c, 0x3b, 0x08, 0x03, 0x12, 0x10, 0xfa, 0x06, 0x0d, 0x08, 0x01, 0x10, 0x02, 0x8a, 0x7d, 0x06,
	0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x25, 0x52, 0x23, 0x08, 0x01, 0x1a, 0x1f, 0x0a, 0x05,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x32, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3a, 0xc2,
	0x0c, 0x37, 0x08, 0x03, 0x12, 0x10, 0xfa, 0x06, 0x0d, 0x08, 0x01, 0x10, 0x03, 0x8a, 0x7d, 0x06,
	0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x21, 0x52, 0x1f, 0x08, 0x01, 0x1a, 0x1b, 0x0a, 0x05,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x0a, 0x09,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3a, 0xc2, 0x0c, 0x37, 0x08, 0x03,
	0x12, 0x10, 0xfa, 0x06, 0x0d, 0x08, 0x01, 0x10, 0x04, 0x8a, 0x7d, 0x06, 0x0a, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x12, 0x21, 0x52, 0x1f, 0x08, 0x01, 0x1a, 0x1b, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65,
	0x73, 0x0a, 0x07, 0x63, 0x61, 0x70, 0x74, 0x61, 0x69, 0x6e, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3c, 0xc2, 0x0c, 0x39, 0x08, 0x03, 0x12, 0x10, 0xfa, 0x06,
	0x0d, 0x08, 0x01, 0x10, 0x05, 0x8a, 0x7d, 0x06, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x23,
	0x52, 0x21, 0x08, 0x01, 0x1a, 0x1d, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x0a, 0x09, 0x63,
	0x72, 0x61, 0x66, 0x74, 0x73, 0x6d, 0x61, 0x6e, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x38, 0xc2, 0x0c, 0x35, 0x08, 0x03, 0x12, 0x10, 0xfa, 0x06, 0x0d, 0x08,
	0x01, 0x10, 0x06, 0x8a, 0x7d, 0x06, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x1f, 0x52, 0x1d,
	0x08, 0x01, 0x1a, 0x19, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x0a, 0x05, 0x6d, 0x61, 0x79,
	0x6f, 0x72, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3a, 0xc2,
	0x0c, 0x37, 0x08, 0x03, 0x12, 0x10, 0xfa, 0x06, 0x0d, 0x08, 0x01, 0x10, 0x07, 0x8a, 0x7d, 0x06,
	0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x21, 0x52, 0x1f, 0x08, 0x01, 0x1a, 0x1b, 0x0a, 0x05,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x72, 0x0a, 0x09,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x39, 0xc2, 0x0c, 0x36, 0x08, 0x03,
	0x12, 0x10, 0xfa, 0x06, 0x0d, 0x08, 0x01, 0x10, 0x08, 0x8a, 0x7d, 0x06, 0x0a, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x12, 0x20, 0x52, 0x1e, 0x08, 0x01, 0x1a, 0x1a, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65,
	0x73, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x8a, 0xb5, 0x18, 0x60, 0x0a, 0x5e, 0x0a, 0x5c, 0x0a, 0x1f, 0x0a, 0x05,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x31, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x39, 0x0a,
	0x37, 0xa2, 0x06, 0x34, 0x08, 0x08, 0x22, 0x1f, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x31, 0x0a, 0x09, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0xfa, 0x83, 0x01, 0x0d, 0x08, 0x01, 0x10, 0x01, 0x8a,
	0x7d, 0x06, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x8a, 0xb5, 0x18, 0x60, 0x0a, 0x5e, 0x0a, 0x5c,
	0x0a, 0x1f, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x32, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x39, 0x0a, 0x37, 0xa2, 0x06, 0x34, 0x08, 0x08, 0x22, 0x1f, 0x0a, 0x05, 0x72, 0x6f,
	0x6c, 0x65, 0x73, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x32,
	0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0xfa, 0x83, 0x01, 0x0d, 0x08,
	0x01, 0x10, 0x02, 0x8a, 0x7d, 0x06, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x8a, 0xb5, 0x18, 0x58,
	0x0a, 0x56, 0x0a, 0x54, 0x0a, 0x1b, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x0a, 0x07, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x35, 0x0a, 0x33, 0xa2, 0x06, 0x30, 0x08, 0x08, 0x22, 0x1b, 0x0a, 0x05, 0x72, 0x6f,
	0x6c, 0x65, 0x73, 0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x72, 0x0a, 0x09, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0xfa, 0x83, 0x01, 0x0d, 0x08, 0x01, 0x10, 0x03, 0x8a,
	0x7d, 0x06, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x8a, 0xb5, 0x18, 0x58, 0x0a, 0x56, 0x0a, 0x54,
	0x0a, 0x1b, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x0a, 0x07, 0x63, 0x61, 0x70, 0x74, 0x61,
	0x69, 0x6e, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x35, 0x0a,
	0x33, 0xa2, 0x06, 0x30, 0x08, 0x08, 0x22, 0x1b, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x0a,
	0x07, 0x63, 0x61, 0x70, 0x74, 0x61, 0x69, 0x6e, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0xfa, 0x83, 0x01, 0x0d, 0x08, 0x01, 0x10, 0x04, 0x8a, 0x7d, 0x06, 0x0a, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x8a, 0xb5, 0x18, 0x5c, 0x0a, 0x5a, 0x0a, 0x58, 0x0a, 0x1d, 0x0a, 0x05,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x0a, 0x09, 0x63, 0x72, 0x61, 0x66, 0x74, 0x73, 0x6d, 0x61, 0x6e,
	0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x35, 0xa2,
	0x06, 0x32, 0x08, 0x08, 0x22, 0x1d, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x0a, 0x09, 0x63,
	0x72, 0x61, 0x66, 0x74, 0x73, 0x6d, 0x61, 0x6e, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0xfa, 0x83, 0x01, 0x0d, 0x08, 0x01, 0x10, 0x05, 0x8a, 0x7d, 0x06, 0x0a, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x8a, 0xb5, 0x18, 0x54, 0x0a, 0x52, 0x0a, 0x50, 0x0a, 0x19, 0x0a, 0x05,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x0a, 0x05, 0x6d, 0x61, 0x79, 0x6f, 0x72, 0x0a, 0x09, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x31, 0xa2, 0x06, 0x2e, 0x08, 0x08,
	0x22, 0x19, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x0a, 0x05, 0x6d, 0x61, 0x79, 0x6f, 0x72,
	0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0xfa, 0x83, 0x01, 0x0d, 0x08,
	0x01, 0x10, 0x06, 0x8a, 0x7d, 0x06, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x8a, 0xb5, 0x18, 0x58,
	0x0a, 0x56, 0x0a, 0x54, 0x0a, 0x1b, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x0a, 0x07, 0x73,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x72, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x35, 0x0a, 0x33, 0xa2, 0x06, 0x30, 0x08, 0x08, 0x22, 0x1b, 0x0a, 0x05, 0x72, 0x6f,
	0x6c, 0x65, 0x73, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x72, 0x0a, 0x09, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0xfa, 0x83, 0x01, 0x0d, 0x08, 0x01, 0x10, 0x07, 0x8a,
	0x7d, 0x06, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x8a, 0xb5, 0x18, 0x56, 0x0a, 0x54, 0x0a, 0x52,
	0x0a, 0x1a, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x72, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x32,
	0xa2, 0x06, 0x2f, 0x08, 0x08, 0x22, 0x1a, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x0a, 0x06,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x72, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0xfa, 0x83, 0x01, 0x0d, 0x08, 0x01, 0x10, 0x08, 0x8a, 0x7d, 0x06, 0x0a, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x8a, 0xb5, 0x18, 0x35, 0x22, 0x33, 0x12, 0x24, 0x34, 0x34, 0x36, 0x65, 0x64, 0x61,
	0x31, 0x33, 0x2d, 0x37, 0x65, 0x38, 0x36, 0x2d, 0x34, 0x30, 0x63, 0x35, 0x2d, 0x35, 0x35, 0x63,
	0x30, 0x2d, 0x61, 0x63, 0x33, 0x36, 0x33, 0x30, 0x31, 0x35, 0x66, 0x39, 0x32, 0x64, 0x1a, 0x0b,
	0x64, 0x75, 0x6d, 0x6d, 0x79, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x48, 0x0a, 0x08, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x12, 0x20, 0x2e, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f,
	0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x69, 0x6e, 0x67, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0x1a, 0x2e, 0x70, 0x75, 0x65, 0x72,
	0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x1c, 0x2e,
	0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x6f, 0x53, 0x68, 0x69, 0x70, 0x1a, 0x1a, 0x2e, 0x70, 0x75,
	0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x05, 0x43, 0x72, 0x61, 0x66, 0x74,
	0x12, 0x1a, 0x2e, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67,
	0x61, 0x6d, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x1a, 0x1a, 0x2e, 0x70,
	0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x43, 0x72, 0x61, 0x66,
	0x74, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x1c, 0x2e, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f,
	0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x1a, 0x1a, 0x2e, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69,
	0x63, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x49, 0x0a, 0x0f, 0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x6e,
	0x69, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63,
	0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x1a,
	0x1a, 0x2e, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x19, 0x57,
	0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x73, 0x74, 0x46, 0x72,
	0x6f, 0x6d, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x2e, 0x70, 0x75, 0x65, 0x72, 0x74,
	0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x4d, 0x73, 0x67, 0x1a, 0x1a, 0x2e, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69,
	0x63, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x57, 0x0a, 0x17, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x73,
	0x74, 0x54, 0x6f, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x2e, 0x70, 0x75,
	0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0x1a, 0x2e,
	0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x19, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x50, 0x6c, 0x61, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f,
	0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0x1a, 0x2e, 0x70, 0x75, 0x65,
	0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x15, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x43,
	0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x51, 0x75, 0x61, 0x72, 0x72, 0x79, 0x12,
	0x1a, 0x2e, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x1a, 0x1a, 0x2e, 0x70, 0x75,
	0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x12, 0x52, 0x65, 0x66, 0x69, 0x6c,
	0x6c, 0x43, 0x6f, 0x6c, 0x6f, 0x6e, 0x69, 0x73, 0x74, 0x53, 0x68, 0x69, 0x70, 0x12, 0x1a, 0x2e,
	0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x1a, 0x1a, 0x2e, 0x70, 0x75, 0x65, 0x72,
	0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x06, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x12,
	0x22, 0x2e, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61,
	0x6d, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x1a, 0x1a, 0x2e, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63,
	0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x49, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x51, 0x75, 0x61, 0x72,
	0x72, 0x79, 0x12, 0x1a, 0x2e, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f,
	0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x73, 0x67, 0x1a, 0x1a,
	0x2e, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61, 0x6d,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x12, 0x1c, 0x2e, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63,
	0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x1a, 0x1a, 0x2e, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f,
	0x67, 0x61, 0x6d, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a,
	0x09, 0x45, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x70, 0x75, 0x65,
	0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0x1a, 0x2e, 0x70, 0x75, 0x65,
	0x72, 0x74, 0x6f, 0x5f, 0x72, 0x69, 0x63, 0x6f, 0x5f, 0x67, 0x61, 0x6d, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x04, 0x80, 0xb5, 0x18, 0x01, 0x42, 0x49, 0x5a, 0x47,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6e, 0x67, 0x65, 0x6c,
	0x62, 0x65, 0x6c, 0x74, 0x72, 0x61, 0x6e, 0x2f, 0x67, 0x61, 0x6d, 0x65, 0x2d, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2f, 0x70, 0x75, 0x65,
	0x72, 0x74, 0x6f, 0x2d, 0x72, 0x69, 0x63, 0x6f, 0x2f, 0x70, 0x75, 0x65, 0x72, 0x74, 0x6f, 0x5f,
	0x72, 0x69, 0x63, 0x6f, 0x5f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_rawDescOnce sync.Once
	file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_rawDescData = file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_rawDesc
)

func file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_rawDescGZIP() []byte {
	file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_rawDescOnce.Do(func() {
		file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_rawDescData)
	})
	return file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_rawDescData
}

var file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_goTypes = []interface{}{
	(*Response)(nil),             // 0: puerto_rico_game.Response
	(*EmptyMsg)(nil),             // 1: puerto_rico_game.EmptyMsg
	(*Count)(nil),                // 2: puerto_rico_game.Count
	(*RoleChoice)(nil),           // 3: puerto_rico_game.RoleChoice
	(*BuildingChoice)(nil),       // 4: puerto_rico_game.BuildingChoice
	(*GoodToShip)(nil),           // 5: puerto_rico_game.GoodToShip
	(*GoodChoice)(nil),           // 6: puerto_rico_game.GoodChoice
	(*PlantationChoice)(nil),     // 7: puerto_rico_game.PlantationChoice
	(*PlayerChoice)(nil),         // 8: puerto_rico_game.PlayerChoice
	(*State)(nil),                // 9: puerto_rico_game.State
	(*game_engine_pb.Error)(nil), // 10: game_engine.Error
	(PlayerID)(0),                // 11: puerto_rico_game.PlayerID
	(RoleID)(0),                  // 12: puerto_rico_game.RoleID
	(Building)(0),                // 13: puerto_rico_game.Building
	(GoodID)(0),                  // 14: puerto_rico_game.GoodID
	(CargoShipID)(0),             // 15: puerto_rico_game.CargoShipID
	(PlantationID)(0),            // 16: puerto_rico_game.PlantationID
}
var file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_depIdxs = []int32{
	9,  // 0: puerto_rico_game.Response.state:type_name -> puerto_rico_game.State
	10, // 1: puerto_rico_game.Response.error:type_name -> game_engine.Error
	11, // 2: puerto_rico_game.RoleChoice.player:type_name -> puerto_rico_game.PlayerID
	12, // 3: puerto_rico_game.RoleChoice.role:type_name -> puerto_rico_game.RoleID
	13, // 4: puerto_rico_game.BuildingChoice.building:type_name -> puerto_rico_game.Building
	14, // 5: puerto_rico_game.GoodToShip.good:type_name -> puerto_rico_game.GoodID
	15, // 6: puerto_rico_game.GoodToShip.ship:type_name -> puerto_rico_game.CargoShipID
	14, // 7: puerto_rico_game.GoodChoice.good:type_name -> puerto_rico_game.GoodID
	16, // 8: puerto_rico_game.PlantationChoice.plantation:type_name -> puerto_rico_game.PlantationID
	11, // 9: puerto_rico_game.PlayerChoice.player:type_name -> puerto_rico_game.PlayerID
	2,  // 10: puerto_rico_game.Actions.SetPlayers:input_type -> puerto_rico_game.Count
	1,  // 11: puerto_rico_game.Actions.Start:input_type -> puerto_rico_game.EmptyMsg
	3,  // 12: puerto_rico_game.Actions.Accept:input_type -> puerto_rico_game.RoleChoice
	4,  // 13: puerto_rico_game.Actions.Purchase:input_type -> puerto_rico_game.BuildingChoice
	5,  // 14: puerto_rico_game.Actions.Load:input_type -> puerto_rico_game.GoodToShip
	1,  // 15: puerto_rico_game.Actions.Craft:input_type -> puerto_rico_game.EmptyMsg
	6,  // 16: puerto_rico_game.Actions.CraftExtra:input_type -> puerto_rico_game.GoodChoice
	1,  // 17: puerto_rico_game.Actions.WelcomeColonist:input_type -> puerto_rico_game.EmptyMsg
	1,  // 18: puerto_rico_game.Actions.WelcomeColonistFromSupply:input_type -> puerto_rico_game.EmptyMsg
	4,  // 19: puerto_rico_game.Actions.ApplyColonistToBuilding:input_type -> puerto_rico_game.BuildingChoice
	7,  // 20: puerto_rico_game.Actions.ApplyColonistToPlantation:input_type -> puerto_rico_game.PlantationChoice
	1,  // 21: puerto_rico_game.Actions.ApplyColonistToQuarry:input_type -> puerto_rico_game.EmptyMsg
	1,  // 22: puerto_rico_game.Actions.RefillColonistShip:input_type -> puerto_rico_game.EmptyMsg
	7,  // 23: puerto_rico_game.Actions.Settle:input_type -> puerto_rico_game.PlantationChoice
	1,  // 24: puerto_rico_game.Actions.ConstructQuarry:input_type -> puerto_rico_game.EmptyMsg
	6,  // 25: puerto_rico_game.Actions.Trade:input_type -> puerto_rico_game.GoodChoice
	8,  // 26: puerto_rico_game.Actions.EndAction:input_type -> puerto_rico_game.PlayerChoice
	0,  // 27: puerto_rico_game.Actions.SetPlayers:output_type -> puerto_rico_game.Response
	0,  // 28: puerto_rico_game.Actions.Start:output_type -> puerto_rico_game.Response
	0,  // 29: puerto_rico_game.Actions.Accept:output_type -> puerto_rico_game.Response
	0,  // 30: puerto_rico_game.Actions.Purchase:output_type -> puerto_rico_game.Response
	0,  // 31: puerto_rico_game.Actions.Load:output_type -> puerto_rico_game.Response
	0,  // 32: puerto_rico_game.Actions.Craft:output_type -> puerto_rico_game.Response
	0,  // 33: puerto_rico_game.Actions.CraftExtra:output_type -> puerto_rico_game.Response
	0,  // 34: puerto_rico_game.Actions.WelcomeColonist:output_type -> puerto_rico_game.Response
	0,  // 35: puerto_rico_game.Actions.WelcomeColonistFromSupply:output_type -> puerto_rico_game.Response
	0,  // 36: puerto_rico_game.Actions.ApplyColonistToBuilding:output_type -> puerto_rico_game.Response
	0,  // 37: puerto_rico_game.Actions.ApplyColonistToPlantation:output_type -> puerto_rico_game.Response
	0,  // 38: puerto_rico_game.Actions.ApplyColonistToQuarry:output_type -> puerto_rico_game.Response
	0,  // 39: puerto_rico_game.Actions.RefillColonistShip:output_type -> puerto_rico_game.Response
	0,  // 40: puerto_rico_game.Actions.Settle:output_type -> puerto_rico_game.Response
	0,  // 41: puerto_rico_game.Actions.ConstructQuarry:output_type -> puerto_rico_game.Response
	0,  // 42: puerto_rico_game.Actions.Trade:output_type -> puerto_rico_game.Response
	0,  // 43: puerto_rico_game.Actions.EndAction:output_type -> puerto_rico_game.Response
	27, // [27:44] is the sub-list for method output_type
	10, // [10:27] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_init() }
func file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_init() {
	if File_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto != nil {
		return
	}
	file_github_com_angelbeltran_game_engine_examples_puerto_rico_role_proto_init()
	file_github_com_angelbeltran_game_engine_examples_puerto_rico_building_proto_init()
	file_github_com_angelbeltran_game_engine_examples_puerto_rico_good_proto_init()
	file_github_com_angelbeltran_game_engine_examples_puerto_rico_player_proto_init()
	file_github_com_angelbeltran_game_engine_examples_puerto_rico_plantation_proto_init()
	file_github_com_angelbeltran_game_engine_examples_puerto_rico_cargo_ship_proto_init()
	file_github_com_angelbeltran_game_engine_examples_puerto_rico_state_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Count); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleChoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildingChoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodToShip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodChoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlantationChoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerChoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_goTypes,
		DependencyIndexes: file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_depIdxs,
		MessageInfos:      file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_msgTypes,
	}.Build()
	File_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto = out.File
	file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_rawDesc = nil
	file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_goTypes = nil
	file_github_com_angelbeltran_game_engine_examples_puerto_rico_actions_proto_depIdxs = nil
}
