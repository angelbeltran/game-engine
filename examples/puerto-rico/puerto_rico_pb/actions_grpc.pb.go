// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package puerto_rico_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ActionsClient is the client API for Actions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActionsClient interface {
	SetPlayers(ctx context.Context, in *Count, opts ...grpc.CallOption) (*Response, error)
	Start(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*Response, error)
	Accept(ctx context.Context, in *RoleChoice, opts ...grpc.CallOption) (*Response, error)
	// Action: Builder
	Purchase(ctx context.Context, in *BuildingChoice, opts ...grpc.CallOption) (*Response, error)
	// Action: Captain
	Load(ctx context.Context, in *GoodToShip, opts ...grpc.CallOption) (*Response, error)
	// Action: Craftsman
	Craft(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*Response, error)
	CraftExtra(ctx context.Context, in *GoodChoice, opts ...grpc.CallOption) (*Response, error)
	// Action: Mayor
	WelcomeColonist(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*Response, error)
	WelcomeColonistFromSupply(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*Response, error)
	ApplyColonistToBuilding(ctx context.Context, in *BuildingChoice, opts ...grpc.CallOption) (*Response, error)
	ApplyColonistToPlantation(ctx context.Context, in *PlantationChoice, opts ...grpc.CallOption) (*Response, error)
	ApplyColonistToQuarry(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*Response, error)
	RefillColonistShip(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*Response, error)
	// Action: Settler
	Settle(ctx context.Context, in *PlantationChoice, opts ...grpc.CallOption) (*Response, error)
	ConstructQuarry(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*Response, error)
	// Action: Trademan
	Trade(ctx context.Context, in *GoodChoice, opts ...grpc.CallOption) (*Response, error)
	EndAction(ctx context.Context, in *PlayerChoice, opts ...grpc.CallOption) (*Response, error)
}

type actionsClient struct {
	cc grpc.ClientConnInterface
}

func NewActionsClient(cc grpc.ClientConnInterface) ActionsClient {
	return &actionsClient{cc}
}

func (c *actionsClient) SetPlayers(ctx context.Context, in *Count, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/puerto_rico_game.Actions/SetPlayers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionsClient) Start(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/puerto_rico_game.Actions/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionsClient) Accept(ctx context.Context, in *RoleChoice, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/puerto_rico_game.Actions/Accept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionsClient) Purchase(ctx context.Context, in *BuildingChoice, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/puerto_rico_game.Actions/Purchase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionsClient) Load(ctx context.Context, in *GoodToShip, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/puerto_rico_game.Actions/Load", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionsClient) Craft(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/puerto_rico_game.Actions/Craft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionsClient) CraftExtra(ctx context.Context, in *GoodChoice, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/puerto_rico_game.Actions/CraftExtra", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionsClient) WelcomeColonist(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/puerto_rico_game.Actions/WelcomeColonist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionsClient) WelcomeColonistFromSupply(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/puerto_rico_game.Actions/WelcomeColonistFromSupply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionsClient) ApplyColonistToBuilding(ctx context.Context, in *BuildingChoice, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/puerto_rico_game.Actions/ApplyColonistToBuilding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionsClient) ApplyColonistToPlantation(ctx context.Context, in *PlantationChoice, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/puerto_rico_game.Actions/ApplyColonistToPlantation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionsClient) ApplyColonistToQuarry(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/puerto_rico_game.Actions/ApplyColonistToQuarry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionsClient) RefillColonistShip(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/puerto_rico_game.Actions/RefillColonistShip", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionsClient) Settle(ctx context.Context, in *PlantationChoice, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/puerto_rico_game.Actions/Settle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionsClient) ConstructQuarry(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/puerto_rico_game.Actions/ConstructQuarry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionsClient) Trade(ctx context.Context, in *GoodChoice, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/puerto_rico_game.Actions/Trade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actionsClient) EndAction(ctx context.Context, in *PlayerChoice, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/puerto_rico_game.Actions/EndAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActionsServer is the server API for Actions service.
// All implementations must embed UnimplementedActionsServer
// for forward compatibility
type ActionsServer interface {
	SetPlayers(context.Context, *Count) (*Response, error)
	Start(context.Context, *EmptyMsg) (*Response, error)
	Accept(context.Context, *RoleChoice) (*Response, error)
	// Action: Builder
	Purchase(context.Context, *BuildingChoice) (*Response, error)
	// Action: Captain
	Load(context.Context, *GoodToShip) (*Response, error)
	// Action: Craftsman
	Craft(context.Context, *EmptyMsg) (*Response, error)
	CraftExtra(context.Context, *GoodChoice) (*Response, error)
	// Action: Mayor
	WelcomeColonist(context.Context, *EmptyMsg) (*Response, error)
	WelcomeColonistFromSupply(context.Context, *EmptyMsg) (*Response, error)
	ApplyColonistToBuilding(context.Context, *BuildingChoice) (*Response, error)
	ApplyColonistToPlantation(context.Context, *PlantationChoice) (*Response, error)
	ApplyColonistToQuarry(context.Context, *EmptyMsg) (*Response, error)
	RefillColonistShip(context.Context, *EmptyMsg) (*Response, error)
	// Action: Settler
	Settle(context.Context, *PlantationChoice) (*Response, error)
	ConstructQuarry(context.Context, *EmptyMsg) (*Response, error)
	// Action: Trademan
	Trade(context.Context, *GoodChoice) (*Response, error)
	EndAction(context.Context, *PlayerChoice) (*Response, error)
	mustEmbedUnimplementedActionsServer()
}

// UnimplementedActionsServer must be embedded to have forward compatible implementations.
type UnimplementedActionsServer struct {
}

func (*UnimplementedActionsServer) SetPlayers(context.Context, *Count) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPlayers not implemented")
}
func (*UnimplementedActionsServer) Start(context.Context, *EmptyMsg) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (*UnimplementedActionsServer) Accept(context.Context, *RoleChoice) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Accept not implemented")
}
func (*UnimplementedActionsServer) Purchase(context.Context, *BuildingChoice) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Purchase not implemented")
}
func (*UnimplementedActionsServer) Load(context.Context, *GoodToShip) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Load not implemented")
}
func (*UnimplementedActionsServer) Craft(context.Context, *EmptyMsg) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Craft not implemented")
}
func (*UnimplementedActionsServer) CraftExtra(context.Context, *GoodChoice) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CraftExtra not implemented")
}
func (*UnimplementedActionsServer) WelcomeColonist(context.Context, *EmptyMsg) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WelcomeColonist not implemented")
}
func (*UnimplementedActionsServer) WelcomeColonistFromSupply(context.Context, *EmptyMsg) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WelcomeColonistFromSupply not implemented")
}
func (*UnimplementedActionsServer) ApplyColonistToBuilding(context.Context, *BuildingChoice) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyColonistToBuilding not implemented")
}
func (*UnimplementedActionsServer) ApplyColonistToPlantation(context.Context, *PlantationChoice) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyColonistToPlantation not implemented")
}
func (*UnimplementedActionsServer) ApplyColonistToQuarry(context.Context, *EmptyMsg) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyColonistToQuarry not implemented")
}
func (*UnimplementedActionsServer) RefillColonistShip(context.Context, *EmptyMsg) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefillColonistShip not implemented")
}
func (*UnimplementedActionsServer) Settle(context.Context, *PlantationChoice) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Settle not implemented")
}
func (*UnimplementedActionsServer) ConstructQuarry(context.Context, *EmptyMsg) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConstructQuarry not implemented")
}
func (*UnimplementedActionsServer) Trade(context.Context, *GoodChoice) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Trade not implemented")
}
func (*UnimplementedActionsServer) EndAction(context.Context, *PlayerChoice) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndAction not implemented")
}
func (*UnimplementedActionsServer) mustEmbedUnimplementedActionsServer() {}

func RegisterActionsServer(s *grpc.Server, srv ActionsServer) {
	s.RegisterService(&_Actions_serviceDesc, srv)
}

func _Actions_SetPlayers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Count)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionsServer).SetPlayers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/puerto_rico_game.Actions/SetPlayers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionsServer).SetPlayers(ctx, req.(*Count))
	}
	return interceptor(ctx, in, info, handler)
}

func _Actions_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionsServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/puerto_rico_game.Actions/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionsServer).Start(ctx, req.(*EmptyMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Actions_Accept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleChoice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionsServer).Accept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/puerto_rico_game.Actions/Accept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionsServer).Accept(ctx, req.(*RoleChoice))
	}
	return interceptor(ctx, in, info, handler)
}

func _Actions_Purchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildingChoice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionsServer).Purchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/puerto_rico_game.Actions/Purchase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionsServer).Purchase(ctx, req.(*BuildingChoice))
	}
	return interceptor(ctx, in, info, handler)
}

func _Actions_Load_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodToShip)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionsServer).Load(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/puerto_rico_game.Actions/Load",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionsServer).Load(ctx, req.(*GoodToShip))
	}
	return interceptor(ctx, in, info, handler)
}

func _Actions_Craft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionsServer).Craft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/puerto_rico_game.Actions/Craft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionsServer).Craft(ctx, req.(*EmptyMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Actions_CraftExtra_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodChoice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionsServer).CraftExtra(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/puerto_rico_game.Actions/CraftExtra",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionsServer).CraftExtra(ctx, req.(*GoodChoice))
	}
	return interceptor(ctx, in, info, handler)
}

func _Actions_WelcomeColonist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionsServer).WelcomeColonist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/puerto_rico_game.Actions/WelcomeColonist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionsServer).WelcomeColonist(ctx, req.(*EmptyMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Actions_WelcomeColonistFromSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionsServer).WelcomeColonistFromSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/puerto_rico_game.Actions/WelcomeColonistFromSupply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionsServer).WelcomeColonistFromSupply(ctx, req.(*EmptyMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Actions_ApplyColonistToBuilding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildingChoice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionsServer).ApplyColonistToBuilding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/puerto_rico_game.Actions/ApplyColonistToBuilding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionsServer).ApplyColonistToBuilding(ctx, req.(*BuildingChoice))
	}
	return interceptor(ctx, in, info, handler)
}

func _Actions_ApplyColonistToPlantation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlantationChoice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionsServer).ApplyColonistToPlantation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/puerto_rico_game.Actions/ApplyColonistToPlantation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionsServer).ApplyColonistToPlantation(ctx, req.(*PlantationChoice))
	}
	return interceptor(ctx, in, info, handler)
}

func _Actions_ApplyColonistToQuarry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionsServer).ApplyColonistToQuarry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/puerto_rico_game.Actions/ApplyColonistToQuarry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionsServer).ApplyColonistToQuarry(ctx, req.(*EmptyMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Actions_RefillColonistShip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionsServer).RefillColonistShip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/puerto_rico_game.Actions/RefillColonistShip",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionsServer).RefillColonistShip(ctx, req.(*EmptyMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Actions_Settle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlantationChoice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionsServer).Settle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/puerto_rico_game.Actions/Settle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionsServer).Settle(ctx, req.(*PlantationChoice))
	}
	return interceptor(ctx, in, info, handler)
}

func _Actions_ConstructQuarry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionsServer).ConstructQuarry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/puerto_rico_game.Actions/ConstructQuarry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionsServer).ConstructQuarry(ctx, req.(*EmptyMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Actions_Trade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodChoice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionsServer).Trade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/puerto_rico_game.Actions/Trade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionsServer).Trade(ctx, req.(*GoodChoice))
	}
	return interceptor(ctx, in, info, handler)
}

func _Actions_EndAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerChoice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionsServer).EndAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/puerto_rico_game.Actions/EndAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionsServer).EndAction(ctx, req.(*PlayerChoice))
	}
	return interceptor(ctx, in, info, handler)
}

var _Actions_serviceDesc = grpc.ServiceDesc{
	ServiceName: "puerto_rico_game.Actions",
	HandlerType: (*ActionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetPlayers",
			Handler:    _Actions_SetPlayers_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _Actions_Start_Handler,
		},
		{
			MethodName: "Accept",
			Handler:    _Actions_Accept_Handler,
		},
		{
			MethodName: "Purchase",
			Handler:    _Actions_Purchase_Handler,
		},
		{
			MethodName: "Load",
			Handler:    _Actions_Load_Handler,
		},
		{
			MethodName: "Craft",
			Handler:    _Actions_Craft_Handler,
		},
		{
			MethodName: "CraftExtra",
			Handler:    _Actions_CraftExtra_Handler,
		},
		{
			MethodName: "WelcomeColonist",
			Handler:    _Actions_WelcomeColonist_Handler,
		},
		{
			MethodName: "WelcomeColonistFromSupply",
			Handler:    _Actions_WelcomeColonistFromSupply_Handler,
		},
		{
			MethodName: "ApplyColonistToBuilding",
			Handler:    _Actions_ApplyColonistToBuilding_Handler,
		},
		{
			MethodName: "ApplyColonistToPlantation",
			Handler:    _Actions_ApplyColonistToPlantation_Handler,
		},
		{
			MethodName: "ApplyColonistToQuarry",
			Handler:    _Actions_ApplyColonistToQuarry_Handler,
		},
		{
			MethodName: "RefillColonistShip",
			Handler:    _Actions_RefillColonistShip_Handler,
		},
		{
			MethodName: "Settle",
			Handler:    _Actions_Settle_Handler,
		},
		{
			MethodName: "ConstructQuarry",
			Handler:    _Actions_ConstructQuarry_Handler,
		},
		{
			MethodName: "Trade",
			Handler:    _Actions_Trade_Handler,
		},
		{
			MethodName: "EndAction",
			Handler:    _Actions_EndAction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/angelbeltran/game-engine/examples/puerto-rico/actions.proto",
}
